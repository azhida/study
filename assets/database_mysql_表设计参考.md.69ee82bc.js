import{_ as a,o as e,c as l,Q as t}from"./chunks/framework.aaef0e9b.js";const q=JSON.parse('{"title":"表设计","description":"","frontmatter":{},"headers":[],"relativePath":"database/mysql/表设计参考.md","lastUpdated":1712120377000}'),o={name:"database/mysql/表设计参考.md"},i=t(`<h1 id="表设计" tabindex="-1">表设计 <a class="header-anchor" href="#表设计" aria-label="Permalink to &quot;表设计&quot;">​</a></h1><h2 id="名字" tabindex="-1">名字 <a class="header-anchor" href="#名字" aria-label="Permalink to &quot;名字&quot;">​</a></h2><h3 id="见名知意" tabindex="-1">见名知意 <a class="header-anchor" href="#见名知意" aria-label="Permalink to &quot;见名知意&quot;">​</a></h3><p>言简意赅，见名知意，能够提高沟通和维护成本。<br> 模拟两可，不知所云，显得杂乱无章，让人难以理解。</p><ul><li>示例</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">用户名称字段定义成：user_name</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><h3 id="大小写" tabindex="-1">大小写 <a class="header-anchor" href="#大小写" aria-label="Permalink to &quot;大小写&quot;">​</a></h3><p>名字尽量都用<code>小写字母</code>，因为从视觉上，小写字母更容易让人读懂。</p><ul><li>示例</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">字段名：product_name</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><h3 id="分隔符" tabindex="-1">分隔符 <a class="header-anchor" href="#分隔符" aria-label="Permalink to &quot;分隔符&quot;">​</a></h3><ul><li>示例</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">字段名：product_name</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><p>强烈建议大家在单词间用 <code>_</code> 分隔。</p><h3 id="表名" tabindex="-1">表名 <a class="header-anchor" href="#表名" aria-label="Permalink to &quot;表名&quot;">​</a></h3><p>带上<code>业务前缀</code>。</p><p>订单相关：<code>order_</code>，例如：order_pay、order_pay_detail等。</p><p>商品相关：<code>product_</code>，例如：product_spu，product_sku等。</p><h3 id="字段名称" tabindex="-1">字段名称 <a class="header-anchor" href="#字段名称" aria-label="Permalink to &quot;字段名称&quot;">​</a></h3><ul><li>字段统一：如 状态统一使用 <code>status</code> ，而不是一个地方使用 <code>status</code> 另一个地方使用 <code>flag</code>。 <ul><li><code>created_at</code> 创建时间</li><li><code>updated_at</code> 更新时间</li><li><code>deleted_at</code> 删除时间</li></ul></li><li>关联关系字段名带上关联表名称：如 <code>classes.id</code> 和 <code>students.class_id</code>。</li></ul><p>很多公共字段，在不同的表之间，可以使用全局统一的命名规则，定义成相同的名称，以便于大家好理解。</p><h3 id="索引名" tabindex="-1">索引名 <a class="header-anchor" href="#索引名" aria-label="Permalink to &quot;索引名&quot;">​</a></h3><p>索引有很多种，包括：主键、普通索引、唯一索引、联合索引等。</p><p>每张表的主键只有一个，一般使用 <code>id</code> 命名。</p><p>普通索引和联合索引，其实是一类。在建立该类索引时，可以加 <code>index_</code> 前缀，比如：<code>index_users_status</code> 。</p><p>唯一索引，可以加 <code>unique_</code> 前缀，比如：<code>unique_users_email</code>。</p><h2 id="字段类型" tabindex="-1">字段类型 <a class="header-anchor" href="#字段类型" aria-label="Permalink to &quot;字段类型&quot;">​</a></h2><p>时间格式的数据有：date、datetime和timestamp等等可以选择。</p><p>字符类型的数据有：varchar、char、text等可以选择。</p><p>数字类型的数据有：int、bigint、smallint、tinyint等可以选择。</p><h3 id="参考原则" tabindex="-1">参考原则 <a class="header-anchor" href="#参考原则" aria-label="Permalink to &quot;参考原则&quot;">​</a></h3><ul><li>尽可能选择占用存储空间小的字段类型，在满足正常业务需求的情况下，从小到大，往上选。</li><li>如果字符串长度固定，或者差别不大，可以选择char类型。如果字符串长度差别较大，可以选择varchar类型。</li><li>是否字段，可以选择bit类型。</li><li>枚举字段，可以选择tinyint类型。</li><li>主键字段，可以选择bigint类型。</li><li>金额字段，可以选择decimal类型。</li><li>时间字段，可以选择timestamp或datetime类型。</li></ul><h2 id="字段长度" tabindex="-1">字段长度 <a class="header-anchor" href="#字段长度" aria-label="Permalink to &quot;字段长度&quot;">​</a></h2><h2 id="字段个数" tabindex="-1">字段个数 <a class="header-anchor" href="#字段个数" aria-label="Permalink to &quot;字段个数&quot;">​</a></h2><h2 id="主键" tabindex="-1">主键 <a class="header-anchor" href="#主键" aria-label="Permalink to &quot;主键&quot;">​</a></h2><h2 id="存储引擎" tabindex="-1">存储引擎 <a class="header-anchor" href="#存储引擎" aria-label="Permalink to &quot;存储引擎&quot;">​</a></h2><h2 id="not-null" tabindex="-1">NOT NULL <a class="header-anchor" href="#not-null" aria-label="Permalink to &quot;NOT NULL&quot;">​</a></h2><h2 id="外键" tabindex="-1">外键 <a class="header-anchor" href="#外键" aria-label="Permalink to &quot;外键&quot;">​</a></h2><h2 id="索引" tabindex="-1">索引 <a class="header-anchor" href="#索引" aria-label="Permalink to &quot;索引&quot;">​</a></h2><h2 id="时间字段" tabindex="-1">时间字段 <a class="header-anchor" href="#时间字段" aria-label="Permalink to &quot;时间字段&quot;">​</a></h2><h2 id="金额字段" tabindex="-1">金额字段 <a class="header-anchor" href="#金额字段" aria-label="Permalink to &quot;金额字段&quot;">​</a></h2><h2 id="json字段" tabindex="-1">json字段 <a class="header-anchor" href="#json字段" aria-label="Permalink to &quot;json字段&quot;">​</a></h2><h2 id="唯一索引" tabindex="-1">唯一索引 <a class="header-anchor" href="#唯一索引" aria-label="Permalink to &quot;唯一索引&quot;">​</a></h2><h2 id="字符集" tabindex="-1">字符集 <a class="header-anchor" href="#字符集" aria-label="Permalink to &quot;字符集&quot;">​</a></h2><h2 id="排序规则" tabindex="-1">排序规则 <a class="header-anchor" href="#排序规则" aria-label="Permalink to &quot;排序规则&quot;">​</a></h2><h2 id="大字段" tabindex="-1">大字段 <a class="header-anchor" href="#大字段" aria-label="Permalink to &quot;大字段&quot;">​</a></h2><h2 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h2><h2 id="冗余字段" tabindex="-1">冗余字段 <a class="header-anchor" href="#冗余字段" aria-label="Permalink to &quot;冗余字段&quot;">​</a></h2>`,48),r=[i];function s(d,n,c,h,u,p){return e(),l("div",null,r)}const m=a(o,[["render",s]]);export{q as __pageData,m as default};
