import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.aaef0e9b.js";const h=JSON.parse('{"title":"PHP 扩展包开发教程","description":"","frontmatter":{},"headers":[],"relativePath":"server/php/PHP扩展包开发教程.md","lastUpdated":1680863035000}'),p={name:"server/php/PHP扩展包开发教程.md"},o=l(`<h1 id="php-扩展包开发教程" tabindex="-1">PHP 扩展包开发教程 <a class="header-anchor" href="#php-扩展包开发教程" aria-label="Permalink to &quot;PHP 扩展包开发教程&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>学习地址：<a href="https://learnku.com/courses/creating-package/preface/2063" target="_blank" rel="noreferrer">https://learnku.com/courses/creating-package/preface/2063</a></p></div><h2 id="常见的扩展包类型" tabindex="-1">常见的扩展包类型 <a class="header-anchor" href="#常见的扩展包类型" aria-label="Permalink to &quot;常见的扩展包类型&quot;">​</a></h2><h3 id="api-sdk" tabindex="-1">API SDK <a class="header-anchor" href="#api-sdk" aria-label="Permalink to &quot;API SDK&quot;">​</a></h3><p>为特定的服务商 API 提供 SDK，提供更方便的调用，隐藏不必要的开发细节，比如 <a href="https://github.com/overtrue/wechat" target="_blank" rel="noreferrer">EasyWeChat</a> 是对微信一系列 API 的封装，<a href="https://github.com/overtrue/flysystem-qiniu" target="_blank" rel="noreferrer">overtrue/flysystem-qiniu</a> 是对七牛 CDN API 的封装以及 <a href="https://github.com/overtrue/easy-sms" target="_blank" rel="noreferrer">EasySMS</a> 是封装了各大国内短信平台的 SDK 等。</p><h3 id="业务模块" tabindex="-1">业务模块 <a class="header-anchor" href="#业务模块" aria-label="Permalink to &quot;业务模块&quot;">​</a></h3><p>封装一些通用的业务模块，比如购物车、登录注册、权限控制等。比如：</p><ul><li><a href="https://github.com/spatie/laravel-permission" target="_blank" rel="noreferrer">Laravel Permission</a> —— 角色权限管理方案</li><li><a href="https://github.com/laravel/socialite" target="_blank" rel="noreferrer">Socialite</a> —— 第三方登录工具</li><li><a href="https://github.com/GrahamCampbell/Laravel-Markdown" target="_blank" rel="noreferrer">Laravel Markdown</a> —— Markdown 解析工具</li></ul><h3 id="管理工具" tabindex="-1">管理工具 <a class="header-anchor" href="#管理工具" aria-label="Permalink to &quot;管理工具&quot;">​</a></h3><p>对一些业务工具或者项目内容提供 UI 或者命令行管理入口。比如：</p><ul><li><a href="https://github.com/z-song/laravel-admin" target="_blank" rel="noreferrer">laravel-admin</a> —— 管理员后台解决方案</li><li><a href="https://github.com/barryvdh/laravel-debugbar" target="_blank" rel="noreferrer">Laravel Debugbar</a> —— 应用调试工具</li><li><a href="https://github.com/spatie/laravel-tail" target="_blank" rel="noreferrer">Laravel Tail</a> —— 查看应用 Log 信息</li></ul><h3 id="生成器" tabindex="-1">生成器 <a class="header-anchor" href="#生成器" aria-label="Permalink to &quot;生成器&quot;">​</a></h3><p>针对重复的内容提供基于模板或者项目脚手架的生成工具。比如：</p><ul><li><a href="https://github.com/InfyOmLabs/laravel-generator" target="_blank" rel="noreferrer">laravel-generator</a> —— InfyOmLabs 出品的代码生成工具</li><li><a href="https://github.com/mpociot/laravel-apidoc-generator" target="_blank" rel="noreferrer">Laravel API Documentation Generator</a> —— API 文档生成工具</li></ul><h3 id="系统模块封装" tabindex="-1">系统模块封装 <a class="header-anchor" href="#系统模块封装" aria-label="Permalink to &quot;系统模块封装&quot;">​</a></h3><p>时间、图像处理、PDF 生成、文字提取等。比如：</p><ul><li><a href="https://github.com/PHPOffice" target="_blank" rel="noreferrer">PHPOffice</a> —— Word、Excel 等 Office 产品的 PHP 阅读和编辑工具</li><li><a href="https://github.com/KnpLabs/snappy" target="_blank" rel="noreferrer">Snappy</a> —— HTML 页面生成 PDF，基于 Webkit 渲染引擎</li><li><a href="https://github.com/dompdf/dompdf" target="_blank" rel="noreferrer">DOMPdf</a> —— HTML 页面生成 PDF，基于一些常见 PHP 原生扩展实现</li><li><a href="https://github.com/thephpleague/glide" target="_blank" rel="noreferrer">Glide</a> —— 高品质的图像处理扩展包</li></ul><h3 id="设计模式实践" tabindex="-1">设计模式实践 <a class="header-anchor" href="#设计模式实践" aria-label="Permalink to &quot;设计模式实践&quot;">​</a></h3><p>通过一些巧妙的封装，实现设计模式在应用中的实践。比如 Laravel 中的</p><ul><li><a href="https://github.com/andersao/l5-repository" target="_blank" rel="noreferrer">Laravel Repository</a> —— Repository 设计模式的实现</li><li><a href="https://github.com/hyn/multi-tenant" target="_blank" rel="noreferrer">hyn/multi-tenant</a> —— 多租户程序结构的解决方案</li></ul><p>当然还有 <a href="https://learnku.com/laravel/projects" target="_blank" rel="noreferrer">一些其它的扩展包</a>，不过我们常见的主要归类为以上几种，熟读一下这些优秀扩展的代码，你将获益匪浅。</p><h2 id="composer-基础使用" tabindex="-1">Composer 基础使用 <a class="header-anchor" href="#composer-基础使用" aria-label="Permalink to &quot;Composer 基础使用&quot;">​</a></h2><h3 id="composer-命令行工具的基础使用" tabindex="-1">Composer 命令行工具的基础使用 <a class="header-anchor" href="#composer-命令行工具的基础使用" aria-label="Permalink to &quot;Composer 命令行工具的基础使用&quot;">​</a></h3><blockquote><p>注意：<code>vendor/package</code> 为包名示例，请替换为具体需要的包名称</p></blockquote><h4 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h4><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">require</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">vendor/package</span></span>
<span class="line"></span></code></pre></div><p>或者</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">install</span></span>
<span class="line"></span></code></pre></div><h4 id="更新依赖" tabindex="-1">更新依赖 <a class="header-anchor" href="#更新依赖" aria-label="Permalink to &quot;更新依赖&quot;">​</a></h4><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">update</span><span style="color:#BABED8;"> [vendor/package]</span></span>
<span class="line"></span></code></pre></div><p>包名是可选的，指定时将更新指定的包并更新它所依赖的包，不指定时检查所有包的新版本。</p><h4 id="删除依赖" tabindex="-1">删除依赖 <a class="header-anchor" href="#删除依赖" aria-label="Permalink to &quot;删除依赖&quot;">​</a></h4><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">remove</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">vendor/package</span></span>
<span class="line"></span></code></pre></div><h3 id="学习资料" tabindex="-1">学习资料 <a class="header-anchor" href="#学习资料" aria-label="Permalink to &quot;学习资料&quot;">​</a></h3><ul><li><a href="https://learnku.com/articles/5333/modular-development-of-php-based-on-composer" target="_blank" rel="noreferrer">基于 Composer 的 PHP 模块化开发</a></li><li><a href="https://learnku.com/docs/composer/2018" target="_blank" rel="noreferrer">Composer 中文文档</a></li><li><a href="https://getcomposer.org/doc/" target="_blank" rel="noreferrer">Composer 官方文档</a></li></ul><h2 id="扩展包的基础结构" tabindex="-1">扩展包的基础结构 <a class="header-anchor" href="#扩展包的基础结构" aria-label="Permalink to &quot;扩展包的基础结构&quot;">​</a></h2><p>虽然说扩展包并没有什么强制的规定一定要如何组织代码，但是我们推荐根据业界约定俗成的结构：</p><div class="language-md"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">weather/</span></span>
<span class="line"><span style="color:#BABED8;">├── .editorconfig      # 编辑器配置文件，比如缩进大小、换行模式等</span></span>
<span class="line"><span style="color:#BABED8;">├── .gitattributes     # git 配置文件，可以设计导出时忽略文件等</span></span>
<span class="line"><span style="color:#BABED8;">├── .gitignore         # git 忽略文件配置列表</span></span>
<span class="line"><span style="color:#BABED8;">├── .php_cs            # PHP-CS-Fixer 配置文件</span></span>
<span class="line"><span style="color:#BABED8;">├── README.md    </span></span>
<span class="line"><span style="color:#BABED8;">├── composer.json</span></span>
<span class="line"><span style="color:#BABED8;">├── phpunit.xml.dist</span></span>
<span class="line"><span style="color:#BABED8;">├── src</span></span>
<span class="line"><span style="color:#BABED8;">│   └── .gitkeep</span></span>
<span class="line"><span style="color:#BABED8;">└── tests</span></span>
<span class="line"><span style="color:#BABED8;">    └── .gitkeep</span></span>
<span class="line"></span></code></pre></div><p>上面这个包结构适用于几乎所有的 PHP 扩展包，如果你的扩展包有其它附加内容，也可以自由地做一些调整，只要满足清晰合理即可。</p><h3 id="结构说明" tabindex="-1">结构说明 <a class="header-anchor" href="#结构说明" aria-label="Permalink to &quot;结构说明&quot;">​</a></h3><ul><li><p>src 目录</p><p>通常我们将源代码放置到此目录下，文件名与类命名遵循驼峰命名法，目录与命名空间一致。</p><div class="info custom-block"><p class="custom-block-title">注意</p><p>我们命名空间通常是按包名来的，然后 src 映射到驼峰写法的命名空间（例如：包 <code>overtrue/weather</code> 的命名空间为 <code>Overtrue\\Weather</code>）。</p><p>比如 src\\Weather.php 文件的命名空间为 <code>Overtrue\\Weather</code>，类名为 <code>Overtrue\\Weather\\Weather</code>。 代码组织结构请符合 <a href="https://learnku.com/docs/psr/psr-4-autoloader/1608" target="_blank" rel="noreferrer">PSR-4 规范</a>。</p></div></li><li><p>tests 目录</p><p>用于存放单元测试或者功能测试的测试用例代码，与 src 组织规则基本一致。</p></li><li><p>.editorconfig 文件</p><p><a href="https://editorconfig.org/" target="_blank" rel="noreferrer">EditorConfig</a> 的配置文件，EditorConfig 是一套用于统一代码格式的解决方案，很多项目都有用到，比如 Laravel、jQuery、Underscore 和 Ruby 等等。</p><p>EditorConfig 可以帮助开发者在不同的编辑器和 IDE 之间定义和维护一致的代码风格。EditorConfig 包含一个用于定义代码格式的文件和一批编辑器插件，这些插件可以让编辑器读取配置文件并依此格式化代码。EditorConfig 的配置文件十分易读，并且可以很好的在 VCS（Version Control System）下工作。</p><p>简单的说就是，这个配置文件定义了一些规则，比如 PHP 缩进是用空格还是用 Tab。它会被现代的编辑器所识别并应用（部分编辑器可能需要安装对应的插件，请参考 <a href="https://editorconfig.org/" target="_blank" rel="noreferrer">EditorConfig 官网</a> ）使用。</p></li><li><p>.gitattributes</p><p>Git 的属性配置文件，你可以对个别文件或目录定义不同的合并策略，让 Git 知道怎样比较非文本文件，在你提交或签出前让 Git 过滤内容。你将在这部分了解到能在自己的项目中使用的属性，以及一些实例。更多请参考：<a href="https://git-scm.com/book/zh/v1/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git%E5%B1%9E%E6%80%A7" target="_blank" rel="noreferrer">《自定义 Git - Git 属性》- git-scm.com</a></p></li><li><p>.gitignore</p><p>Git 忽略文件列表配置文件，将不需要纳入版本控制的文件或者目录按行配置在该文件即可。</p></li><li><p>.php_cs</p><p>代码格式修复工具 <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer" target="_blank" rel="noreferrer">PHP-CS-Fixer</a> 配置文件，它可以按配置的标准自动修复代码格式，以及统一文件头注释等非常多的功能。</p></li><li><p>README.md</p><p>项目说明文档，一份项目介绍与使用指引，维护状态授权方式等。</p></li><li><p>composer.json</p><p><a href="https://getcomposer.org/" target="_blank" rel="noreferrer">Composer</a> 配置文件。</p></li><li><p>phpunit.xml.dist</p><p><a href="https://phpunit.de/" target="_blank" rel="noreferrer">PHPUnit</a> 配置文件，指定测试目录与测试环境变量等，具体内容请参考官方文档：<a href="https://phpunit.readthedocs.io/zh_CN/latest/organizing-tests.html#xml" target="_blank" rel="noreferrer">《组织测试：用 XML 配置来编排测试套件》- PHPunit</a>。</p></li><li><p>.gitkeep</p><p>如果一个目录为空，我们是无法纳入到版本控制中的，所以我们创建了一个随意命名（最好还是按业界通用做法命名为 <code>.gitkeep</code>）的隐藏文件来保证 <strong>目录不为空</strong>。</p></li></ul><h3 id="包构建工具" tabindex="-1">包构建工具 <a class="header-anchor" href="#包构建工具" aria-label="Permalink to &quot;包构建工具&quot;">​</a></h3><p>我们在开发过程中每次都去建立这个目录会比较麻烦，所以我们也做了一个包结构生成工具来完成这些基础工作：</p><p><a href="https://github.com/overtrue/package-builder" target="_blank" rel="noreferrer">overtrue/package-builder：</a></p><p>用法非常的简单，我推荐大家全局安装：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">global</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">require</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">overtrue/package-builder</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--prefer-source</span></span>
<span class="line"></span></code></pre></div><h4 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h4><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">package-builder</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">build</span><span style="color:#BABED8;"> [目标目录]</span></span>
<span class="line"></span></code></pre></div><p>比如我们打算做一个扩展包叫 <code>weather</code> ，目录是当前目录下：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">package-builder</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">build</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">./weather</span></span>
<span class="line"></span></code></pre></div><p>然后会以交互问答形式要求输入一些基本信息。</p><p>其中大部分都是默认值即可。然后我们就会得到这样的目录结构了：</p><div class="language-md"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">weather/</span></span>
<span class="line"><span style="color:#BABED8;">├── .editorconfig      # 编辑器配置文件，比如缩进大小、换行模式等</span></span>
<span class="line"><span style="color:#BABED8;">├── .gitattributes     # git 配置文件，可以设计导出时忽略文件等</span></span>
<span class="line"><span style="color:#BABED8;">├── .gitignore         # git 忽略文件配置列表</span></span>
<span class="line"><span style="color:#BABED8;">├── .php_cs            # PHP-CS-Fixer 配置文件</span></span>
<span class="line"><span style="color:#BABED8;">├── README.md    </span></span>
<span class="line"><span style="color:#BABED8;">├── composer.json</span></span>
<span class="line"><span style="color:#BABED8;">├── phpunit.xml.dist</span></span>
<span class="line"><span style="color:#BABED8;">├── src</span></span>
<span class="line"><span style="color:#BABED8;">│   └── .gitkeep</span></span>
<span class="line"><span style="color:#BABED8;">└── tests</span></span>
<span class="line"><span style="color:#BABED8;">    └── .gitkeep</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">2 directories, 9 files</span></span>
<span class="line"></span></code></pre></div><p>接下来就要进入到我们的开发部分了。</p><h2 id="需求分析与功能设计-天气-sdk" tabindex="-1">需求分析与功能设计 - 天气 SDK <a class="header-anchor" href="#需求分析与功能设计-天气-sdk" aria-label="Permalink to &quot;需求分析与功能设计 - 天气 SDK&quot;">​</a></h2><p>我们以一个天气预报 SDK 为例来讲解本门课程，天气接口我们使用 <a href="https://lbs.amap.com/api/webservice/guide/api/weatherinfo/" target="_blank" rel="noreferrer">高德开放平台</a> 提供的，免费限次使用，开始之前我们需要做一下需求分析与功能设计。</p><h3 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h3><p>我们对天气接口的使用需求较为简单，主要为以下两个：</p><ul><li>按地名查询实时天气；</li><li>获取最近的天气预报。</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>高德开放平台提供的天气接口满足以上需求。</p></div><h3 id="功能设计" tabindex="-1">功能设计 <a class="header-anchor" href="#功能设计" aria-label="Permalink to &quot;功能设计&quot;">​</a></h3><p>虽然我们提供的主要功能为上面两个，但是涉及到编码的层面我们需要考虑的将会更细化一些：</p><ul><li>主要业务：获取天气信息；</li><li>异常处理：提供统一的异常类，方便调用方定位异常；</li><li>自定义参数：需要支持自定义参数，比如超时时间等；</li><li>提供 Laravel Service Provider ：为 Laravel 框架提供专属封装的入口。</li></ul><p>接下来让我们一起来实现这些功能吧。</p><h2 id="准备工作-创建高德开放平台应用" tabindex="-1">准备工作 - 创建高德开放平台应用 <a class="header-anchor" href="#准备工作-创建高德开放平台应用" aria-label="Permalink to &quot;准备工作 - 创建高德开放平台应用&quot;">​</a></h2><p><a href="https://lbs.amap.com/api/webservice/guide/api/weatherinfo/" target="_blank" rel="noreferrer">高德开放平台</a></p><ul><li>注册登录</li><li>创建应用</li><li>获取 API Key</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>服务平台：选择 <code>Web服务</code></p></div><h2 id="创建项目并安装依赖包" tabindex="-1">创建项目并安装依赖包 <a class="header-anchor" href="#创建项目并安装依赖包" aria-label="Permalink to &quot;创建项目并安装依赖包&quot;">​</a></h2><h3 id="composer-加速" tabindex="-1">Composer 加速 <a class="header-anchor" href="#composer-加速" aria-label="Permalink to &quot;Composer 加速&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">config</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">repo.packagist</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">https://mirrors.aliyun.com/composer/</span></span>
<span class="line"></span></code></pre></div><h3 id="安装-package-builder-包结构创建工具" tabindex="-1">安装 Package Builder 包结构创建工具 <a class="header-anchor" href="#安装-package-builder-包结构创建工具" aria-label="Permalink to &quot;安装 Package Builder 包结构创建工具&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">global</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">require</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">overtrue/package-builder</span><span style="color:#BABED8;"> </span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>记得配置全局变量，否则无法使用命令 <code>package-builder build weather </code> 。<br> 记得重新打开 CMD 工具，否则命令还未生效。</p><ul><li>windows 下 ，用 <code>Git Bash</code> 工具执行 <code>composer global require overtrue/package-builder</code> 就能看到 安装的路径了，然后把路径复制到 环境变量中。</li></ul></div><h3 id="创建目录结构" tabindex="-1">创建目录结构 <a class="header-anchor" href="#创建目录结构" aria-label="Permalink to &quot;创建目录结构&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">package-builder</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">build</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">weather</span><span style="color:#BABED8;"> </span></span>
<span class="line"></span></code></pre></div><p>按提示操作即可</p><h3 id="声明自动加载" tabindex="-1">声明自动加载 <a class="header-anchor" href="#声明自动加载" aria-label="Permalink to &quot;声明自动加载&quot;">​</a></h3><p>接下来我们需要在 <code>composer.json</code> 中声明包自动加载的命名空间。如果已存在，则可跳过。</p><p>composer.json</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">autoload</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">psr-4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">Azhida</span><span style="color:#BABED8;">\\\\</span><span style="color:#F78C6C;">Weather</span><span style="color:#BABED8;">\\\\</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./src/</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="安装依赖-1" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖-1" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h3><p>我们的项目需要请求接口，所以我们选择 <a href="https://github.com/guzzle/guzzle" target="_blank" rel="noreferrer">guzzle/guzzle</a> 来做为 http client， 其它暂时用不到，后面用到的时候再安装即可：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">weather/</span></span>
<span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">require</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">guzzlehttp/guzzle</span><span style="color:#BABED8;">                      </span></span>
<span class="line"></span></code></pre></div><h2 id="从接口获取天气数据" tabindex="-1">从接口获取天气数据 <a class="header-anchor" href="#从接口获取天气数据" aria-label="Permalink to &quot;从接口获取天气数据&quot;">​</a></h2><p>根据之前设计的功能，结合 <a href="https://lbs.amap.com/api/webservice/guide/api/weatherinfo/" target="_blank" rel="noreferrer">天气查询接口文档</a> 的参数说明，我们添加几个方法：</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>注意：方法名通常是 动名词 形式，比如： <code>getUsers</code> ， <code>updateProfile</code> ， <code>deleteOrder</code> ， <code>revertAction</code> 等。</p></div><h3 id="创建-weather-类" tabindex="-1">创建 <code>Weather</code> 类 <a class="header-anchor" href="#创建-weather-类" aria-label="Permalink to &quot;创建 \`Weather\` 类&quot;">​</a></h3><p>src/Weather.php</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#BABED8;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Azhida</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Weather</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Weather</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">protected</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">protected</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">guzzleOptions </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">public</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">__construct</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">string</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#BABED8;">key </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 获取实例</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">public</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">getHttpClient</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">new</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Client</span><span style="color:#89DDFF;">($this-&gt;</span><span style="color:#BABED8;">guzzleOptions</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 配置参数</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">public</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">setGuzzleOptions</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">array</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">options</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#BABED8;">guzzleOptions </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">options</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * $city - 城市名 / 高德地址位置 adcode，比如：“深圳” 或者（adcode：440300）；</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * $type - 返回内容类型：base: 返回实况天气 / all: 返回预报天气；</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * $format - 输出的数据格式，默认为 json 格式，当 output 设置为 “xml” 时，输出的为 XML 格式的数据。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">public</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">getWeather</span><span style="color:#89DDFF;">($</span><span style="color:#BABED8;">city</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">string</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">type </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">base</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">string</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">format </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">url </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://restapi.amap.com/v3/weather/weatherInfo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">query </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">array_filter</span><span style="color:#89DDFF;">([</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">city</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">city</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">output</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">format</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">extensions</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">type</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">response </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#82AAFF;">getHttpClient</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">($</span><span style="color:#BABED8;">url</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">query</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">query</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">])-&gt;</span><span style="color:#82AAFF;">getBody</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">getContents</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">format </span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">\\</span><span style="color:#82AAFF;">json_decode</span><span style="color:#89DDFF;">($</span><span style="color:#BABED8;">response</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">true)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">response</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="异常与错误处理" tabindex="-1">异常与错误处理 <a class="header-anchor" href="#异常与错误处理" aria-label="Permalink to &quot;异常与错误处理&quot;">​</a></h2><h3 id="什么时候应该抛出异常" tabindex="-1">什么时候应该抛出异常？ <a class="header-anchor" href="#什么时候应该抛出异常" aria-label="Permalink to &quot;什么时候应该抛出异常？&quot;">​</a></h3><p>按照单一职责原则，一个类只应该关心自己的逻辑，当出现问题的时候，<strong>如果不是当前类该处理的，我们就应该抛出而不是消化</strong>。怎么理解呢？比如，请求天气接口的时候，网络出现问题，Guzzle 抛出了异常，这时候应该抛出异常。可是为啥不是 catch 异常然后返回 <code>false</code> 呢？这就涉及到边界问题了，<strong>业务异常</strong>与<strong>运行时异常</strong> 要区分开，对方接口说你要查询的城市不存在，返回错误，这属于业务异常，这时候是不会抛出异常的。而你请求的 API 不存在，或者对方服务器宕机，或者你的服务器网络出问题，这属于运行时异常，就应该以异常抛出来告知调用方，而不是自主处理该异常并返回 <code>false</code> 来结束逻辑。</p><p>当然了，可能刚开始你是不太好理解这部分的，当你有更多的应用设计与代码实践经验后你会慢慢感受到这个边界。</p><h3 id="异常的分类与命名" tabindex="-1">异常的分类与命名 <a class="header-anchor" href="#异常的分类与命名" aria-label="Permalink to &quot;异常的分类与命名&quot;">​</a></h3><p>异常通常分为几个种类，按名称来命名：</p><ul><li><strong>参数错误</strong>，当传入的参数不合法时，我们通常抛出异常；</li><li><strong>HTTP 异常</strong>，在请求 API 时异常终止时抛出的异常；</li><li><strong>其它异常</strong>，模块其它部分异常。</li></ul><p>当然还有其它的，你可以命名非常细，比如 <code>InvalidGatewayNameException</code> 、 <code>ErrorResponseException</code> 等等，你可以自由发挥，只要做到合理命名即可。</p><p>当扩展出现问题时，为了方便上层调用方更准确的定位问题，我们通常会为模块设计一个根异常类，在 <code>src/Exceptions</code> 创建类 <code>Azhida\\Weather\\Exceptions\\Exception</code> 类。</p><h3 id="异常类定义" tabindex="-1">异常类定义 <a class="header-anchor" href="#异常类定义" aria-label="Permalink to &quot;异常类定义&quot;">​</a></h3><h4 id="根异常类" tabindex="-1">根异常类 <a class="header-anchor" href="#根异常类" aria-label="Permalink to &quot;根异常类&quot;">​</a></h4><p>src/Exceptions/Exception.php</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#BABED8;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Azhida</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Weather</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Exceptions</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Exception</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">extends</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Exception</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="http-网络请求异常类" tabindex="-1">HTTP 网络请求异常类 <a class="header-anchor" href="#http-网络请求异常类" aria-label="Permalink to &quot;HTTP 网络请求异常类&quot;">​</a></h4><p>src/Exceptions/HttpException.php</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#BABED8;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Azhida</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Weather</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Exceptions</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * HTTP 请求异常类</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">HttpException</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">extends</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Exception</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="参数异常类" tabindex="-1">参数异常类 <a class="header-anchor" href="#参数异常类" aria-label="Permalink to &quot;参数异常类&quot;">​</a></h4><p>src/Exceptions/InvalidArgumentException.php</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#BABED8;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Azhida</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Weather</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Exceptions</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 参数异常类</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">InvalidArgumentException</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">extends</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Exception</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="异常类的使用" tabindex="-1">异常类的使用 <a class="header-anchor" href="#异常类的使用" aria-label="Permalink to &quot;异常类的使用&quot;">​</a></h3><p>src/Weather.php</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#BABED8;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Azhida</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Weather</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#BABED8;">Azhida</span><span style="color:#89DDFF;">\\</span><span style="color:#BABED8;">Weather</span><span style="color:#89DDFF;">\\</span><span style="color:#BABED8;">Exceptions</span><span style="color:#89DDFF;">\\</span><span style="color:#BABED8;">HttpException</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#BABED8;">Azhida</span><span style="color:#89DDFF;">\\</span><span style="color:#BABED8;">Weather</span><span style="color:#89DDFF;">\\</span><span style="color:#BABED8;">Exceptions</span><span style="color:#89DDFF;">\\</span><span style="color:#BABED8;">InvalidArgumentException</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Weather</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">protected</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">protected</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">guzzleOptions </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">public</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">__construct</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">string</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#BABED8;">key </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 获取实例</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">public</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">getHttpClient</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">new</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Client</span><span style="color:#89DDFF;">($this-&gt;</span><span style="color:#BABED8;">guzzleOptions</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 配置参数</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">public</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">setGuzzleOptions</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">array</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">options</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#BABED8;">guzzleOptions </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">options</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * $city - 城市名 / 高德地址位置 adcode，比如：“深圳” 或者（adcode：440300）；</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * $type - 返回内容类型：base: 返回实况天气 / all: 返回预报天气；</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * $format - 输出的数据格式，默认为 json 格式，当 output 设置为 “xml” 时，输出的为 XML 格式的数据。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">public</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">getWeather</span><span style="color:#89DDFF;">($</span><span style="color:#BABED8;">city</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">string</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">type </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">base</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">string</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">format </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">url </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://restapi.amap.com/v3/weather/weatherInfo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(!\\</span><span style="color:#82AAFF;">in_array</span><span style="color:#89DDFF;">(\\</span><span style="color:#82AAFF;">strtolower</span><span style="color:#89DDFF;">($</span><span style="color:#BABED8;">format</span><span style="color:#89DDFF;">),</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xml</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]))</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 参数异常</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">new</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">InvalidArgumentException</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Invalid response format: </span><span style="color:#89DDFF;">&#39;.</span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">format</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(!\\</span><span style="color:#82AAFF;">in_array</span><span style="color:#89DDFF;">(\\</span><span style="color:#82AAFF;">strtolower</span><span style="color:#89DDFF;">($</span><span style="color:#BABED8;">type</span><span style="color:#89DDFF;">),</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">base</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">all</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]))</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 参数异常</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">new</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">InvalidArgumentException</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Invalid type value(base/all): </span><span style="color:#89DDFF;">&#39;.</span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">type</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">query </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">array_filter</span><span style="color:#89DDFF;">([</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">city</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">city</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">output</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">\\</span><span style="color:#82AAFF;">strtolower</span><span style="color:#89DDFF;">($</span><span style="color:#BABED8;">format</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">extensions</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">\\</span><span style="color:#82AAFF;">strtolower</span><span style="color:#89DDFF;">($</span><span style="color:#BABED8;">type</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">response </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#82AAFF;">getHttpClient</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">($</span><span style="color:#BABED8;">url</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#BABED8;">                </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">query</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">query</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">])-&gt;</span><span style="color:#82AAFF;">getBody</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">getContents</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">format </span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">\\</span><span style="color:#82AAFF;">json_decode</span><span style="color:#89DDFF;">($</span><span style="color:#BABED8;">response</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">true)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">response</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(\\</span><span style="color:#FFCB6B;">Exception</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">e</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// HTTP 网络请求异常</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">new</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">HttpException</span><span style="color:#89DDFF;">($</span><span style="color:#BABED8;">e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">getMessage</span><span style="color:#89DDFF;">(),</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">getCode</span><span style="color:#89DDFF;">(),</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">e</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="编写单元测试" tabindex="-1">编写单元测试 <a class="header-anchor" href="#编写单元测试" aria-label="Permalink to &quot;编写单元测试&quot;">​</a></h2><h3 id="准备工作" tabindex="-1">准备工作 <a class="header-anchor" href="#准备工作" aria-label="Permalink to &quot;准备工作&quot;">​</a></h3><p>首先需要安装两个包：单元测试框架 <a href="https://github.com/sebastianbergmann/phpunit" target="_blank" rel="noreferrer">PHPUnit</a> 、依赖模拟 <a href="https://github.com/mockery/mockery" target="_blank" rel="noreferrer">Mockery</a> ：</p><p>项目根目录下执行</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">require</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">phpunit/phpunit</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">mockery/mockery</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--dev</span></span>
<span class="line"></span></code></pre></div><p>在开始写测试之前我们先大致了解一下 PHPUnit 的使用：</p><ul><li>测试用例与类名对应，以 Test.php 结尾，比如 WeatherTest.php，类名与文件名一致；</li><li>测试用例需要继承 <code>PHPUnit\\Framework\\TestCase</code> 基类；</li><li>测试用例的目录结构与源码一致；</li><li>测试用例的方法名格式为 <code>test源方法名</code>，比如：<code>testGetWeather</code>。</li></ul><p>以上这些规约虽然有一些不是强制的，但是也建议你按照这样子来写，以保证代码清晰与可读性。</p><h3 id="未完待续" tabindex="-1">未完待续 <a class="header-anchor" href="#未完待续" aria-label="Permalink to &quot;未完待续&quot;">​</a></h3><p>todo ...</p><h2 id="本地测试扩展包" tabindex="-1">本地测试扩展包 <a class="header-anchor" href="#本地测试扩展包" aria-label="Permalink to &quot;本地测试扩展包&quot;">​</a></h2><h3 id="创建测试项目" tabindex="-1">创建测试项目 <a class="header-anchor" href="#创建测试项目" aria-label="Permalink to &quot;创建测试项目&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在开发好的扩展包同级目录下创建空项目</p></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">weather-test</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">weather-test</span></span>
<span class="line"></span></code></pre></div><p>根目录使用 composer 引入开发好的扩展包 <code>azhida/weather</code> ：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 需要先初始化 composer.json, 一路回车即可</span></span>
<span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">init</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 配置包路径，注意，这里 \`../weather\` 为相对路径，不要弄错了</span></span>
<span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">config</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">repositories.weather</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">path</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">../weather</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 安装扩展包  这里  \`dev-master\`  中的 dev 指该分支下最新的提交，master 是指定的包中的分支名</span></span>
<span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">require</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">azhida/weather:dev-master</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 或者</span></span>
<span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">require</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">azhida/weather:dev-main</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 或者</span></span>
<span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">require</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">azhida/weather</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">@dev</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 如果提示版本号找不到，就在扩展包的 composer.json 文件加上版本号</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># &quot;version&quot;: &quot;dev-master&quot;,</span></span>
<span class="line"></span></code></pre></div><p><code>weather-test</code> 根目录新建文件 <code>index.php</code></p><p>index.php</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#BABED8;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">require</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">__DIR__</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">.&#39;</span><span style="color:#C3E88D;">/vendor/autoload.php</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#BABED8;">Azhida</span><span style="color:#89DDFF;">\\</span><span style="color:#BABED8;">Weather</span><span style="color:#89DDFF;">\\</span><span style="color:#BABED8;">Weather</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 高德开放平台应用 API Key</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">key </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">7d54670aa0f9395bf6c82bc5359b3bef</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">w </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">new</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Weather</span><span style="color:#89DDFF;">($</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">获取实时天气：</span><span style="color:#BABED8;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">response </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">w</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">getWeather</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">南宁</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">json_encode</span><span style="color:#89DDFF;">($</span><span style="color:#BABED8;">response</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> JSON_UNESCAPED_UNICODE </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> JSON_PRETTY_PRINT</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">\\n\\n</span><span style="color:#C3E88D;">获取天气预报：</span><span style="color:#BABED8;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">response </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">w</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">getWeather</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">南宁</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">all</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">json_encode</span><span style="color:#89DDFF;">($</span><span style="color:#BABED8;">response</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> JSON_UNESCAPED_UNICODE </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> JSON_PRETTY_PRINT</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">\\n\\n</span><span style="color:#C3E88D;">获取实时天气(XML)：</span><span style="color:#BABED8;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">w</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">getWeather</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">南宁</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">base</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xml</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>运行 <code>index.php</code> 文件就有数据了</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">php</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">index.php</span></span>
<span class="line"></span></code></pre></div><h3 id="原理说明" tabindex="-1">原理说明 <a class="header-anchor" href="#原理说明" aria-label="Permalink to &quot;原理说明&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">config</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">repositories.weather</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">path</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">../weather</span><span style="color:#BABED8;"> </span></span>
<span class="line"></span></code></pre></div><p>它在 <code>composer.json</code> 中添加了如下部分：</p><p>composer.json</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">    .</span></span>
<span class="line"><span style="color:#BABED8;">    .</span></span>
<span class="line"><span style="color:#BABED8;">    .</span></span>
<span class="line"><span style="color:#BABED8;">     </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">repositories</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">weather</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../weather</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    .</span></span>
<span class="line"><span style="color:#BABED8;">    .</span></span>
<span class="line"><span style="color:#BABED8;">    .</span></span>
<span class="line"></span></code></pre></div><p>这样我们在安装的时候 composer 会创建一个软链接 <code>vendor/azhida/weather</code> 到包所在目录 <code>../weather</code>，这样一来，你可以直接在测试项目的 <code>vendor/azhida/weather</code> 下修改文件，包里的文件也会跟着变了，是不是对于开发过程中来讲非常的方便？</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>🚨注意：如果在包的原目录创建了新文件，你可能需要刷新一下目录树才能看到新的文件哦。</p></div><h2 id="为-laravel-集成优化" tabindex="-1">为 Laravel 集成优化 <a class="header-anchor" href="#为-laravel-集成优化" aria-label="Permalink to &quot;为 Laravel 集成优化&quot;">​</a></h2><p>为了方便 Laravel 应用集成我们的扩展包，我们需要做一个 Laravel Service Provider，这里由于需要考虑到一个配置问题，因为调用接口需要用到高德开放平台应用 API Key，所以我们设计将它放置到 Laravel 应用的 <code>config/services.php</code> 中：</p><p>在扩展包 <code>weather</code> 目录下</p><p>config/services.php</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#BABED8;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">weather</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">env</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">WEATHER_API_KEY</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">];</span></span>
<span class="line"></span></code></pre></div><p>src/ServiceProvider.php</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#BABED8;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Azhida</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Weather</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">ServiceProvider</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">extends</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">\\</span><span style="color:#BABED8;">Illuminate</span><span style="color:#89DDFF;">\\</span><span style="color:#BABED8;">Support</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">ServiceProvider</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">protected</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">defer </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">public</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">register</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">singleton</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Weather</span><span style="color:#89DDFF;">::</span><span style="color:#F78C6C;">class</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">new</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Weather</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">config</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">services.weather.key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">alias</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Weather</span><span style="color:#89DDFF;">::</span><span style="color:#F78C6C;">class</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">weather</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">public</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">provides</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Weather</span><span style="color:#89DDFF;">::</span><span style="color:#F78C6C;">class</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">weather</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>其中我们设置了 <code>$defer</code> 属性为 <code>true</code> ，并且添加了方法 <code>provides</code> ，这是 <a href="https://learnku.com/docs/laravel/5.6/providers/1360#deferred-providers" target="_blank" rel="noreferrer">Laravel 扩展包的延迟注册方式</a>，它不会在框架启动就注册，而是当你调用到它的时候才会注册。</p><h3 id="配置-laravel-auto-discovery" tabindex="-1">配置 Laravel Auto Discovery <a class="header-anchor" href="#配置-laravel-auto-discovery" aria-label="Permalink to &quot;配置 Laravel Auto Discovery&quot;">​</a></h3><p>我们需要在 <code>composer.json</code> 中添加如下部分：</p><p>composer.json</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">.</span></span>
<span class="line"><span style="color:#BABED8;">.</span></span>
<span class="line"><span style="color:#BABED8;">.</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">extra</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">laravel</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">providers</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Azhida</span><span style="color:#BABED8;">\\\\</span><span style="color:#C3E88D;">Weather</span><span style="color:#BABED8;">\\\\</span><span style="color:#C3E88D;">ServiceProvider</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这样一来我们 Laravel 应用安装后无需手动注册服务提供器即可使用。</p><h3 id="在-laravel-项目中测试" tabindex="-1">在 Laravel 项目中测试 <a class="header-anchor" href="#在-laravel-项目中测试" aria-label="Permalink to &quot;在 Laravel 项目中测试&quot;">​</a></h3><p>在扩展包的同级目录下，先创建一个 Laravel 项目：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">create-project</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">laravel/laravel</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">laravel-weather-test</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">laravel-weather-test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 配置包路径，注意，这里 \`../weather\` 为相对路径，不要弄错了</span></span>
<span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">config</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">repositories.weather</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">path</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">../weather</span><span style="color:#BABED8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 安装扩展包</span></span>
<span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">require</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">azhida/weather</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">@dev</span></span>
<span class="line"></span></code></pre></div><p>在 <code>laravel-weather-test</code> 项目下添加配置项：</p><p>laravel-weather-test/config/services.php</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">weather</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">env</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">WEATHER_API_KEY</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">],</span></span>
<span class="line"></span></code></pre></div><p>另外还需要配置一个 <code>.env</code> 变量：</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>WEATHER_API_KEY 为我们前面准备工作时申请的应用 API Key , 即 高德开放平台应用的 API_KEY</p></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">WEATHER_API_KEY=7d54670aa0f9395bf6c82bc5359b3bef</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><p>创建 控制器</p><p>app/Http/Controllers/WeatherController.php</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#BABED8;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Http</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Controllers</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#BABED8;">Illuminate</span><span style="color:#89DDFF;">\\</span><span style="color:#BABED8;">Http</span><span style="color:#89DDFF;">\\</span><span style="color:#BABED8;">Request</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#BABED8;">Azhida</span><span style="color:#89DDFF;">\\</span><span style="color:#BABED8;">Weather</span><span style="color:#89DDFF;">\\</span><span style="color:#BABED8;">Weather</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">WeatherController</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">extends</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Controller</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">public</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">show</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Request</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">request</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Weather</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">weather</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">city</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">weather</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">getWeather</span><span style="color:#89DDFF;">($</span><span style="color:#BABED8;">city</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>laravel 根目录生成命令控制文件</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">php</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">artisan</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">make:command</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Test</span></span>
<span class="line"></span></code></pre></div><p>会生成文件 <code>laravel-weather-test\\app\\Console\\Commands\\Test.php</code></p><p>laravel-weather-test\\app\\Console\\Commands\\Test.php</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#BABED8;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Console</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Commands</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#BABED8;">Azhida</span><span style="color:#89DDFF;">\\</span><span style="color:#BABED8;">Weather</span><span style="color:#89DDFF;">\\</span><span style="color:#BABED8;">Weather</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#BABED8;">Illuminate</span><span style="color:#89DDFF;">\\</span><span style="color:#BABED8;">Console</span><span style="color:#89DDFF;">\\</span><span style="color:#BABED8;">Command</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Test</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">extends</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Command</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">protected</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">signature </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">protected</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">description </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">测试</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">public</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">handle</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Weather</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">weather</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">res </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">weather</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">getWeather</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">深圳</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#82AAFF;">dd</span><span style="color:#89DDFF;">($</span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>laravel 根目录执行该方法就能看到结果了</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">php</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">artisan</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">test</span></span>
<span class="line"></span></code></pre></div><details class="details custom-block"><summary>结果</summary><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">[</span></span>
<span class="line"><span style="color:#babed8;">  &quot;status&quot; =&gt; &quot;1&quot;</span></span>
<span class="line"><span style="color:#babed8;">  &quot;count&quot; =&gt; &quot;1&quot;</span></span>
<span class="line"><span style="color:#babed8;">  &quot;info&quot; =&gt; &quot;OK&quot;</span></span>
<span class="line"><span style="color:#babed8;">  &quot;infocode&quot; =&gt; &quot;10000&quot;</span></span>
<span class="line"><span style="color:#babed8;">  &quot;lives&quot; =&gt; array:1 [</span></span>
<span class="line"><span style="color:#babed8;">    0 =&gt; array:11 [</span></span>
<span class="line"><span style="color:#babed8;">      &quot;province&quot; =&gt; &quot;广东&quot;</span></span>
<span class="line"><span style="color:#babed8;">      &quot;city&quot; =&gt; &quot;深圳市&quot;</span></span>
<span class="line"><span style="color:#babed8;">      &quot;adcode&quot; =&gt; &quot;440300&quot;</span></span>
<span class="line"><span style="color:#babed8;">      &quot;weather&quot; =&gt; &quot;晴&quot;</span></span>
<span class="line"><span style="color:#babed8;">      &quot;temperature&quot; =&gt; &quot;24&quot;</span></span>
<span class="line"><span style="color:#babed8;">      &quot;winddirection&quot; =&gt; &quot;东南&quot;</span></span>
<span class="line"><span style="color:#babed8;">      &quot;windpower&quot; =&gt; &quot;≤3&quot;</span></span>
<span class="line"><span style="color:#babed8;">      &quot;humidity&quot; =&gt; &quot;54&quot;</span></span>
<span class="line"><span style="color:#babed8;">      &quot;reporttime&quot; =&gt; &quot;2023-04-07 15:47:17&quot;</span></span>
<span class="line"><span style="color:#babed8;">      &quot;temperature_float&quot; =&gt; &quot;24.0&quot;</span></span>
<span class="line"><span style="color:#babed8;">      &quot;humidity_float&quot; =&gt; &quot;54.0&quot;</span></span>
<span class="line"><span style="color:#babed8;">    ]</span></span>
<span class="line"><span style="color:#babed8;">  ]</span></span>
<span class="line"><span style="color:#babed8;">]</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div></details><p>测试通过</p><h2 id="编写友好的说明文档" tabindex="-1">编写友好的说明文档 <a class="header-anchor" href="#编写友好的说明文档" aria-label="Permalink to &quot;编写友好的说明文档&quot;">​</a></h2><p>一个优秀的扩展包应该包含友好的说明文档，所以发布前我们先来完善说明文档，开源项目一般是在项目根目录创建 <code>README.md</code> 作为使用文档，当然，如果你的项目过于复杂，那么你可能需要将文档放到项目 <code>docs</code> 文件夹下，我们这里主要介绍普通复杂度的扩展包文档的编写。</p><p>一份友好的文档应该包含下面这些信息：</p><ul><li>项目简介及创作动机</li><li>项目维护、CI、依赖更新状态（如果有）</li><li>features &amp; 适用人群</li><li>运行的平台或硬件要求</li><li>重要依赖</li><li>如何安装与测试</li><li>使用示例及文档地址</li><li>贡献指南</li><li>License</li><li>鸣谢</li><li>其它特有的信息</li></ul><p>如果 使用 docs 目录存放项目文档，可以选择 前端框架 <a href="/study/web/VitePress/">VitePress</a> , 也可以选择其他自己熟悉的方式，不限编程语言。</p><h2 id="发布上线" tabindex="-1">发布上线 <a class="header-anchor" href="#发布上线" aria-label="Permalink to &quot;发布上线&quot;">​</a></h2><h3 id="创建-github-代码仓库" tabindex="-1">创建 GitHub 代码仓库 <a class="header-anchor" href="#创建-github-代码仓库" aria-label="Permalink to &quot;创建 GitHub 代码仓库&quot;">​</a></h3><ul><li><p>填写名称与描述</p><p>名称： <code>weather</code><br> 描述：天气 SDK</p></li><li><p>提交扩展包代码</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">git init                                                    # 初始化 git 项目</span></span>
<span class="line"><span style="color:#babed8;">git add -A                                                  # 添加全部文件到 git </span></span>
<span class="line"><span style="color:#babed8;">git commit -am &quot;first commit&quot;                               # 提交添加的文件</span></span>
<span class="line"><span style="color:#babed8;">git remote add origin git@github.com:azhida/weather.git     # 设置远程地址</span></span>
<span class="line"><span style="color:#babed8;">git push -u origin master                                   # 将提交推送到远程仓库</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div></li></ul><h3 id="提交到-packagist" tabindex="-1">提交到 Packagist <a class="header-anchor" href="#提交到-packagist" aria-label="Permalink to &quot;提交到 Packagist&quot;">​</a></h3><p>Composer 安装包都是从 Packagist 源读取信息的，所以我们需要去注册我们的扩展包，别人才能安装，如果你还没有 Packagist 账号，先注册一个，建议使用 GitHub 登录：</p><p>地址：<a href="https://packagist.org/" target="_blank" rel="noreferrer">https://packagist.org/</a></p><p>登录以后，点击顶部菜单栏 “Submit” 开始提交项目，填入我们 <strong>代码所在的 GitHub 的仓库 URL</strong>，然后点 &quot;Check&quot;，然后提交即可：</p><p>我的代码仓库地址： <a href="https://github.com/azhida/weather.git" target="_blank" rel="noreferrer">https://github.com/azhida/weather.git</a></p><p>接着会到达项目主页，你会看到一条提示：</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>“This package is not auto-updated. Please set up the GitHub Service Hook for Packagist so that it gets updated whenever you push!”：</p><p><strong>更新</strong><br> 新版 GitHub 已经不需要手动像下面这样注册 webhook 了，当然前提是你在 packgist.org 登录时授权即可。</p></div><p>这条提示的意思是说你的项目不会自动抓取更新，怎么理解呢？下面是原理说明：</p><div class="info custom-block"><p class="custom-block-title">💡原理说明：</p><p>当我们在 Packagist 提交项目的时候，它会抓取一遍项目信息，但是后续我们在修改代码的时候（包括推送代码、发布版本等操作），Packagist 不会知道这个变更，所以我们需要使用 GitHub 提供的通知服务，在我们对代码库做修改的时候，向 Packagist 发出一条通知，通知 Packagist 这个项目发生了更新，这时候 Packagist 才会触发更新任务，抓取新的版本信息，我们才能在最短时间内安装到刚发的版本。</p></div><h3 id="启用项目的-packagist-通知服务" tabindex="-1">启用项目的 Packagist 通知服务 <a class="header-anchor" href="#启用项目的-packagist-通知服务" aria-label="Permalink to &quot;启用项目的 Packagist 通知服务&quot;">​</a></h3><h4 id="获取-packagist-的-api-token" tabindex="-1">获取 Packagist 的 API Token <a class="header-anchor" href="#获取-packagist-的-api-token" aria-label="Permalink to &quot;获取 Packagist 的 API Token&quot;">​</a></h4><p>访问你在 Packagist 的个人主页：<a href="https://packagist.org/profile/" target="_blank" rel="noreferrer">packagist.org/profile/</a> ，点击 &quot;<strong>Show API Token</strong>&quot;，复制 token 备用。</p><h4 id="给项目代码库启用-packagist-通知服务" tabindex="-1">给项目代码库启用 Packagist 通知服务 <a class="header-anchor" href="#给项目代码库启用-packagist-通知服务" aria-label="Permalink to &quot;给项目代码库启用 Packagist 通知服务&quot;">​</a></h4><p>回到我们的 GitHub 项目，点击项目的 <strong>Settings</strong> 菜单：</p><p>进到设置页以后选择左边的 “<strong>Webhooks</strong>” 菜单，点击 “<strong>Add webhook</strong>”，如图：</p><p>填写对应的内容：</p><ul><li>Payload URL: <code>https://packagist.org/api/github?username=Packagist 的用户名</code></li><li>Content type 选择为 <code>application/json</code></li><li>Secret 填写为您刚刚复制的 token</li></ul><p>然后提交即可。</p><p>我们再次有代码提交动作后，刷新 Packagist 的包页面就已经没有那条提示了。</p><p>那包已经上线成功了，如果你的网络没问题，过几分钟，应该就可以安装开发版了。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>没有发布正式版之前，只能安装开发版，像下面这样在包名后面加上 dev-master。</p></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">require</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">azhida/weather::dev-master</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-vvv</span></span>
<span class="line"></span></code></pre></div><p>正式包安装</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">require</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">azhida/weather</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-vvv</span></span>
<span class="line"></span></code></pre></div><h2 id="发布第一个版本" tabindex="-1">发布第一个版本 <a class="header-anchor" href="#发布第一个版本" aria-label="Permalink to &quot;发布第一个版本&quot;">​</a></h2><p>我们刚才安装了开发版，开发版意味着不稳定与不安全，线上项目肯定是要用稳定版的，所以，在我们测试完整后，我们将会发布一个正式版本，测试期间你可以发布 <code>0.0.x</code> 版本，小于 1 的版本在 Composer 中是有特殊处理的哦，这个要弄清楚，具体我就不介绍了，自己去看 <a href="https://learnku.com/docs/composer/2018" target="_blank" rel="noreferrer">Composer 文档</a>。</p><h3 id="什么是版本号" tabindex="-1">什么是版本号 <a class="header-anchor" href="#什么是版本号" aria-label="Permalink to &quot;什么是版本号&quot;">​</a></h3><p>我们的版本号通常建议遵循 <a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noreferrer">语言化版本</a> ，语义化版本的规范在前面链接里有详细说明，主要为：</p><div class="info custom-block"><p class="custom-block-title">版本说明</p><p>版本格式：主版本号。次版本号。修订号，版本号递增规则如下：<br> 主版本号：当你做了不兼容的 API 修改，<br> 次版本号：当你做了向下兼容的功能性新增，<br> 修订号：当你做了向下兼容的问题修正。<br> 先行版本号及版本编译信息可以加到 “主版本号。次版本号。修订号” 的后面，作为延伸。</p></div><p>简单介绍就是，如果你现在的最新版本是 <code>1.0.0</code> ，下面的动作的区别是：</p><ul><li>打补丁，修了一些小 bug，没做 API 修改，那么你应该发布 1.0.1，同理以后也是递增第三位。</li><li>有一天网友在你的基础上提交了新功能，原来的 API 调用方式也没改变，这时候你应该发布 1.1.0 。</li><li>一段时间以后，你心血来潮重构了你的扩展包，调用方式也发生了变化，也就是说安装了以前版本的是无法直接升级的，这时候你需要发布 2.0.0 了。</li></ul><h3 id="发布第一个版本-1" tabindex="-1">发布第一个版本 <a class="header-anchor" href="#发布第一个版本-1" aria-label="Permalink to &quot;发布第一个版本&quot;">​</a></h3><p>在 <a href="https://github.com/" target="_blank" rel="noreferrer">GitHub</a> 项目主页点击 &quot;releases&quot; 进入到版本管理页面；</p><p>然后点击 &quot;Create new release&quot; 创建一个新的版本：</p><p>填写版本号、这次发版的标题、以及这次版本变化的内容描述，点击提交。</p><p>我们的第一个版本就发布完成了，过几分钟你就可以安装刚刚发布的 0.0.1 版本了：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">require</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">azhida/weather</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-vvv</span></span>
<span class="line"></span></code></pre></div><h2 id="代码重构实践" tabindex="-1">代码重构实践 <a class="header-anchor" href="#代码重构实践" aria-label="Permalink to &quot;代码重构实践&quot;">​</a></h2><p>todo ...</p><h2 id="使用-github-actions-做自动化测试" tabindex="-1">使用 GitHub Actions 做自动化测试 <a class="header-anchor" href="#使用-github-actions-做自动化测试" aria-label="Permalink to &quot;使用 GitHub Actions 做自动化测试&quot;">​</a></h2><p>todo ...</p><h2 id="使用-styleci-自动修复代码格式" tabindex="-1">使用 StyleCI 自动修复代码格式 <a class="header-anchor" href="#使用-styleci-自动修复代码格式" aria-label="Permalink to &quot;使用 StyleCI 自动修复代码格式&quot;">​</a></h2><p><a href="https://styleci.io/" target="_blank" rel="noreferrer">StyleCI</a> 它是一个自动检查并修复代码规范的工具，目前支持 PHP、JS、CSS。</p><p>原理与 Travis CI 一样，都是利用 webhook 代码变更通知来创建检查任务，然后检查代码规范生成报告，可选创建 PR 到你的代码仓库以修复格式。</p><h3 id="登录-styleci" tabindex="-1">登录 StyleCI <a class="header-anchor" href="#登录-styleci" aria-label="Permalink to &quot;登录 StyleCI&quot;">​</a></h3><p>同样是支持 GitHub 登录的，所以在首页点击 Login 进入登录页，然后选择 GitHub 或者你的账号账号方式登录即可。</p><h3 id="启用项目" tabindex="-1">启用项目 <a class="header-anchor" href="#启用项目" aria-label="Permalink to &quot;启用项目&quot;">​</a></h3><p>登录成功以后，会进到列表页面。</p><p>同样在搜索框输入包名来启用，如果没有看到你的扩展包，则你需要按以下步骤同步一下：</p><ul><li><code>Settings</code> 按钮</li><li><code>Repos</code> 按钮</li></ul><p>然后应该可以看到仓库列表了，在点击按钮 <code>ENABLE STYLECI</code></p><h3 id="配置项目" tabindex="-1">配置项目 <a class="header-anchor" href="#配置项目" aria-label="Permalink to &quot;配置项目&quot;">​</a></h3><p>启用后点击 “<strong>SHOW ANALYSES</strong>” 查看检查状态。</p><p>由于我们还没有配置过规范，所以没有检查报告，如下图点击设置按钮进入设置页。</p><h3 id="代码规范" tabindex="-1">代码规范 <a class="header-anchor" href="#代码规范" aria-label="Permalink to &quot;代码规范&quot;">​</a></h3><p>在配置框里输入 <code>preset: symfony</code> 简单的内置规范即可，symfony 是 StyleCI 按照 <a href="https://symfony.com/" target="_blank" rel="noreferrer">Symfony</a> 框架规范配置的规则，我们也推荐你使用该规范：</p><p>记得点击保存。</p><h3 id="文件头注释" tabindex="-1">文件头注释 <a class="header-anchor" href="#文件头注释" aria-label="Permalink to &quot;文件头注释&quot;">​</a></h3><p>文件头注释就是我们源代码里的头部注释，我们可以在配置里的 “<strong>Header Comment</strong>” 框里填写我们的文件头注释，一旦某文件缺少与其匹配的头注释检查将不能通过：</p><p>示例内容如下（请根据你的需求自行配置）：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">This file is part of the azhida/weather.</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">(c) azhida &lt;i@azhida.me&gt;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">This source file is subject to the MIT license that is bundled</span></span>
<span class="line"><span style="color:#babed8;">with this source code in the file LICENSE.</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><h3 id="自动化模式" tabindex="-1">自动化模式 <a class="header-anchor" href="#自动化模式" aria-label="Permalink to &quot;自动化模式&quot;">​</a></h3><p>你可以根据你的喜好选择代码格式修复的自动化级别，默认级别为手动模式，也就是说你在查看完检查报告页点击 “<strong>CREATE FIX PR</strong>” 时才会向你的代码库创建 PR，各级别说明如下：</p><blockquote><p>此项修改勾选即保存，不需要另外操作。</p></blockquote><p>因为考虑到有的时候有特殊场景下它处理得不是很完美，我会选择第二档 “<strong>自动创建 PR</strong>”，然后我查看后再决定是否合并，请根据你的喜好来选择就好。</p><p>然后我们回到项目主页，点击 “<strong>ANALYZE NOW</strong>”，手动触发一个检查任务。</p><p>稍等一会儿，我们会看到检查报告。</p><p>可以看到检查并没通过，我们点击 “<strong>SHOW DETAILS</strong>” 查看报告。</p><p>原来是头注释不匹配，这时候可以点击 “<strong>CREATE FIX PR</strong>” 来向我们的代码库提交一个 PR，然后回到 GitHub 代码库，就会发现存在一条 PR 了，合并即可。</p><p>点击 “<strong>Merge pull request</strong>” 合并即可修复代码格式。</p><h3 id="测试自动化触发-pr" tabindex="-1">测试自动化触发 PR <a class="header-anchor" href="#测试自动化触发-pr" aria-label="Permalink to &quot;测试自动化触发 PR&quot;">​</a></h3><p>我们现在故意将代码改得不规范，以测试刚才我们的自动化级别选择（<strong>自动创建 PR</strong>）是否生效：</p><p>src/Weather.php</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 我们将参数间的空格去掉，并且将 $url 定义放到了 } 同一行</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">public</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">getWeather</span><span style="color:#89DDFF;">($</span><span style="color:#BABED8;">location</span><span style="color:#89DDFF;">,$</span><span style="color:#BABED8;">format </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,$</span><span style="color:#BABED8;">coordType </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">null)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{$</span><span style="color:#BABED8;">url </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://api.map.baidu.com/telematics/v3/weather</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">  </span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">.</span></span>
<span class="line"></span></code></pre></div><p>提交代码：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-am</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Test StyleCI.</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-r</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;"># 拉取并合并远程修改（刚才合并了一个 PR）</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">push</span></span>
<span class="line"></span></code></pre></div><p>点击 “<strong>Merge pull request</strong>” 合并即可。</p><p>StyleCI 是按照我们指定的规范来检查的，那这些规范我从哪里知道呢？所有你的疑问都可以从 <a href="https://docs.styleci.io/" target="_blank" rel="noreferrer">官方文档</a> 找到答案。</p><p>todo ...</p>`,261),e=[o];function t(r,c,D,y,i,F){return a(),n("div",null,e)}const E=s(p,[["render",t]]);export{h as __pageData,E as default};
