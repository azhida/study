import{_ as a,o as s,c as e,Q as n}from"./chunks/framework.aaef0e9b.js";const h=JSON.parse('{"title":"setuptools 和 setup.py","description":"","frontmatter":{},"headers":[],"relativePath":"server/python/Python包构建教程.md","lastUpdated":1680584985000}'),o={name:"server/python/Python包构建教程.md"},p=n(`<h1 id="setuptools-和-setup-py" tabindex="-1">setuptools 和 setup.py <a class="header-anchor" href="#setuptools-和-setup-py" aria-label="Permalink to &quot;setuptools 和 setup.py&quot;">​</a></h1><p><code>Setuptools</code> 和 <code>distutils</code> 都是用于编译、分发和安装 python 包的一个工具，特别是在包依赖问题场景下非常有用，它是一个强大的包管理工具。Setuptools 是 distutils 的加强版。编译、分发和安装 python 包的一个关键的事就是编写 setup 脚本。setup 脚本的主要作用在于向包管理工具 <code>Setuptools</code> 或 <code>distutils</code> 说明你的模块分发细节，所以 <code>Setuptools</code> 支持大量的命令以操作你的包。setup 脚本主要调用一个 <code>setup()</code> 方法，许多提供给 <code>Setuptools</code> 的信息都以 <code>keyword arguments</code> 的参数形式提供给 <code>setup()</code> 方法。</p><h1 id="你所需要做的事-一些概念" tabindex="-1">你所需要做的事 &amp; 一些概念 <a class="header-anchor" href="#你所需要做的事-一些概念" aria-label="Permalink to &quot;你所需要做的事 &amp; 一些概念&quot;">​</a></h1><p>对于包开发者和使用者，所需要做的事：</p><ul><li><p>编写 setup.py 脚本，用于处理你的包</p></li><li><p>（可选）编写 setup 配置文件</p></li><li><p>创建源码分发文件，<code>python setup.py sdist</code>，</p></li><li><p>（可选）创建二进制分发文件，<code>python setup.py bdist</code></p><p>对于包使用者，只需要 <code>python setup.py install</code>，便可以成功安装 python 包。</p><h2 id="基础概念" tabindex="-1">基础概念 <a class="header-anchor" href="#基础概念" aria-label="Permalink to &quot;基础概念&quot;">​</a></h2><ul><li>module 模块：module 是 python 中代码重用的基本单元，一个 module 可以通过 <code>import</code> 语句导入到另一个 module；module 分为：<code>pure python module</code>（纯 python 模块）、<code>extension module</code>（扩展模块）和 <code>package</code>（包）</li></ul></li><li><p>pure python module：纯 python 模块是用纯 python 语言编写的模块，单一的 <code>.py</code> 文件作为一个模块使用，也就是一个 <code>.py</code> 可以称为模块了</p></li><li><p>extension module：扩展模块是用底层的 C/C++、Objective-C或 Java 编写的模块，通常包含了一个动态链接库，比如 so、dll 或 Java，目前 <code>distutils</code> 只支持 C/C++ 和 Objective-C，不支持 Java 编写扩展模块；但是 python 提供了一个 <code>JCC</code> 这样一个用于生成访问 Java 类接口的 C++ 代码的胶水模块，应该也是可以使用 Java 编写模块的。</p></li><li><p>package：包是一个带有 <code>__init__.py</code> 文件的文件夹，用于包含其他模块</p></li><li><p>root package：root package 是包的最顶层，它不是实质性的包，因为它不包含 <code>__init__.py</code> 文件。大量的标准库位于 <code>root package</code>，因为它们不属于一个任何更大的模块集合了。实际上，每一个 <code>sys.path</code> 列举出来的文件夹都是 <code>root package</code>，你可以在这些文件夹中找到大量的模块。</p></li><li><p>distribution：模块分发，一个归档在一起的 python 模块集合，它作为一个可下载安装的资源，方便用户使用，作为开发者便需要努力创建一个易于使用的 <code>distribution</code>。</p></li><li><p>distribution root：源代码树的最顶层，也就是 <code>setup.py</code> 所在的位置。</p></li></ul><h2 id="关于源码分发文件和二进制分发文件" tabindex="-1">关于源码分发文件和二进制分发文件 <a class="header-anchor" href="#关于源码分发文件和二进制分发文件" aria-label="Permalink to &quot;关于源码分发文件和二进制分发文件&quot;">​</a></h2><p>源码分发文件是将包分享给其他人更为推荐的一种形式，因为源码分发文件比二进制分发文件更适合跨平台，这样使用者可以在自己的机器上通过编译得到自己的机器相关的包代码并且进行安装。</p><h1 id="示例和分发选择" tabindex="-1">示例和分发选择 <a class="header-anchor" href="#示例和分发选择" aria-label="Permalink to &quot;示例和分发选择&quot;">​</a></h1><ul><li>如果你只是发布几个脚本文件而已，特别是它们逻辑上不属于同一个包，你可以使用 <code>py_modules</code> 选项一个一个地指定；</li><li>如果你需要发布的模块文件太多，使用 <code>py_modules</code> 一个一个指定比较麻烦，特别是模块位于多个包中，那么你可以使用 <code>packages</code> 指定整个包，另外只需要另外指定 <code>package_dir</code>，位于 distribution root 下的模块文件也可以被处理；</li><li>setuptools 帮助文档声明，<code>package_dir</code> 和 <code>py_modules</code> 也可以支持分发任何没有包含 <code>__init__.py</code> 文件夹下的模块，经测试安装过程没有报错，但是没有包含 <code>__init__.py</code> 的文件夹下的模块是没有被正确安装的！因此，如果 python 模块分布在不同的文件夹，最好是在该文件夹下创建一个 <code>__init__.py</code> 文件，以表示它是一个包。</li></ul><h2 id="pure-python-module" tabindex="-1">pure python module <a class="header-anchor" href="#pure-python-module" aria-label="Permalink to &quot;pure python module&quot;">​</a></h2><p>举个简单的例子，你需要发布两个模块 foo 以及 bar.bar，以供别人使用(import foo 和 import bar.bar)。 其目录树如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">pure_module</span></span>
<span class="line"><span style="color:#babed8;">├── bar</span></span>
<span class="line"><span style="color:#babed8;">│   └── bar.py</span></span>
<span class="line"><span style="color:#babed8;">│   └── __init__.py</span></span>
<span class="line"><span style="color:#babed8;">├── foo.py</span></span>
<span class="line"><span style="color:#babed8;">└── setup.py</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><p>如上图所示，pure_module 目录下包含了一个 foo 模块以及一个 bar 包，同时在 bar 包下还包含了一个 bar 模块。 一个仅使用 <code>py_modules</code> 的 setup 脚本可以这样写：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">from setuptools import setup</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">NAME = &#39;foo&#39;</span></span>
<span class="line"><span style="color:#babed8;">VERSION = &#39;1.0&#39;</span></span>
<span class="line"><span style="color:#babed8;">PY_MODULES = [&#39;foo&#39;, &#39;bar.bar&#39;]</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">setup(name = NAME</span></span>
<span class="line"><span style="color:#babed8;">        , version = VERSION</span></span>
<span class="line"><span style="color:#babed8;">        , py_modules = PY_MODULES)</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><p>py_modules 指定了 foo 模块以及 bar.bar 模块。 通过 <code>python setup.py install --user --prefix=</code> 进行安装后，便可以直接通过 <code>import foo 和 import bar.bar</code> 直接使用了。</p><ul><li>注意：经测试，如果 <code>.py</code> 文件位于其他文件夹，该文件夹需要创建一个允许为空的 <code>__init__.py</code> 文件，表示为一个 package，否则安装后不能正常使用其他文件夹的模块。</li></ul><h2 id="package" tabindex="-1">package <a class="header-anchor" href="#package" aria-label="Permalink to &quot;package&quot;">​</a></h2><p>上一节的例子中，bar.bar 属于 bar 包，foo 位于 distribution root，安装后属于 root package，在 Setuptools 中 &quot;&quot; 可以用于表示 root package。所以下面展示两种 setup 脚本的写法：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">pure_module</span></span>
<span class="line"><span style="color:#babed8;">├── bar</span></span>
<span class="line"><span style="color:#babed8;">│   └── bar.py</span></span>
<span class="line"><span style="color:#babed8;">│   └── __init__.py</span></span>
<span class="line"><span style="color:#babed8;">├── foo.py</span></span>
<span class="line"><span style="color:#babed8;">└── setup.py</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><p>仅使用 <code>packages</code> 的 setup.py 文件如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">from setuptools import setup</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">NAME = &#39;foo&#39;</span></span>
<span class="line"><span style="color:#babed8;">VERSION = &#39;1.0&#39;</span></span>
<span class="line"><span style="color:#babed8;">PACKAGES = [&#39;&#39;, &#39;bar&#39;]</span></span>
<span class="line"><span style="color:#babed8;">setup(name = NAME</span></span>
<span class="line"><span style="color:#babed8;">        , version = VERSION</span></span>
<span class="line"><span style="color:#babed8;">        , packages = PACKAGES</span></span>
<span class="line"><span style="color:#babed8;">        )</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><p>如上，packages 包含了 package 的列表 root package 以及 bar，这样便能轻松覆盖到 distribution root 下的 foo.py 和 bar 文件夹下的 bar.py 了，在存在大量模块的情况下，省去像 <code>py_modules</code> 一样穷举模块的麻烦。在 python 中，默认的情况下，包的名字和目录的名字是一致的，比如 bar 包对应了 bar 目录，且包的路径表示是相对于 distribution root 的（也就是 setup.py 所在目录）。比如 <code>packages = [&#39;foo&#39;]</code> ，Setuptools 会在 setup.py 所在目录下寻找 <code>foo/__init__.py</code>，并将 foo/ 下的所有模块包含进去。</p><p>另外一个关键字是 <code>package_dir</code>，它的作用是将 package 映射到其他目录，这样的一个好处是方便将 package 移到其他目录而不用修改 <code>packages</code> 的参数值。举个例子，假设我们现在需要把 bar 移到 foobar 目录下，按照原来的脚本，Setuptools 是无法成功找到 bar 包的。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">package_dir</span></span>
<span class="line"><span style="color:#babed8;">├── foobar</span></span>
<span class="line"><span style="color:#babed8;">│   ├── bar.py</span></span>
<span class="line"><span style="color:#babed8;">│   └── __init__.py</span></span>
<span class="line"><span style="color:#babed8;">├── foo.py</span></span>
<span class="line"><span style="color:#babed8;">└── setup.py</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><p>通过 <code>package_dir = = {&#39;bar&#39;:&#39;foobar&#39;}</code>，将原来的 bar package 映射到 foobar 下。完整的脚本如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">from setuptools import setup</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">NAME = &#39;foo&#39;</span></span>
<span class="line"><span style="color:#babed8;">VERSION = &#39;1.0&#39;</span></span>
<span class="line"><span style="color:#babed8;">PACKAGE_DIR = {&#39;bar&#39;:&#39;foobar&#39;}</span></span>
<span class="line"><span style="color:#babed8;">PACKAGES = [&#39;&#39;, &#39;bar&#39;]</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">setup(name = NAME</span></span>
<span class="line"><span style="color:#babed8;">        , version = VERSION</span></span>
<span class="line"><span style="color:#babed8;">        , package_dir = PACKAGE_DIR</span></span>
<span class="line"><span style="color:#babed8;">        , packages = PACKAGES</span></span>
<span class="line"><span style="color:#babed8;">        )</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><p>package_dir 是一个字典，它的 key 是 package 名（&quot;&quot; 表示 root package），value 是相对于 distribution root 的目录名。在上面的例子中， <code>package_dir = = {&#39;bar&#39;:&#39;foobar&#39;}</code> 改变了 <code>packages</code> 中 package 对应的目录位置，这样当 Setuptools 在找 bar package 时，会在 foobar 目录下找相应的 <code>__init__.py</code> 文件。</p><ul><li>注意，package_dir 会影响 packages 下列出的所有 package，比如，<code>packages =[&#39;bar&#39;, &#39;bar.lib&#39;]</code>，package_dir 不仅会影响所有和 bar 有关的 package，<code>bar.lib</code> 也会相应被映射到 <code>foorbar.lib</code>。</li></ul><h2 id="extension-module" tabindex="-1">extension module <a class="header-anchor" href="#extension-module" aria-label="Permalink to &quot;extension module&quot;">​</a></h2><p>扩展模块需要使用 <code>ext_modules</code> 参数。上面所说的 <code>package_dir</code> 和 <code>packages</code> 都是针对纯 python 模块，而 <code>ext_modules</code> 针对的是使用 C/C++ 底层语言所写的模块。下面举个最简单的例子，扩展模块仅包含一个 foo.cpp 文件，其中定义了可供 python 调用的 myPrint 函数。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">#include &lt;iostream&gt;</span></span>
<span class="line"><span style="color:#babed8;">#include &lt;string&gt;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">using namespace std;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">void myPrint(string text)</span></span>
<span class="line"><span style="color:#babed8;">{</span></span>
<span class="line"><span style="color:#babed8;">    cout &lt;&lt;  text &lt;&lt; endl;</span></span>
<span class="line"><span style="color:#babed8;">}</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">.</span></span>
<span class="line"><span style="color:#babed8;">├── setup.py</span></span>
<span class="line"><span style="color:#babed8;">└── src</span></span>
<span class="line"><span style="color:#babed8;">    ├── foo.cpp</span></span>
<span class="line"><span style="color:#babed8;">    ├── foo.h</span></span>
<span class="line"><span style="color:#babed8;">    └── PythonWrapAPI.cpp</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><p>现在，我们想要发布扩展模块供别人使用我们的 myPrint 方法。想要 python 中成功导入你的包，需要利用额外的代码封装将被调用的方法。这里的 PythonWrapAPI.cpp 的作用就是使用 Python 提供的库封装你所写的接口，它是处在 python 和 C++ 间的胶水库，当 python 调用你的 C++ 方法时，由于语言类型的差别，需要做转换。</p><p>PythonWrapAPI.cpp 如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">#include &quot;foo.h&quot;</span></span>
<span class="line"><span style="color:#babed8;">#include &lt;string&gt;</span></span>
<span class="line"><span style="color:#babed8;">#include &lt;python2.6/Python.h&gt;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">using namespace std;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">/*</span></span>
<span class="line"><span style="color:#babed8;">Notice：Python Interface Wrap</span></span>
<span class="line"><span style="color:#babed8;">*/</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">static PyObject *_myPrint(PyObject *self, PyObject *args)</span></span>
<span class="line"><span style="color:#babed8;">{</span></span>
<span class="line"><span style="color:#babed8;">    char *text;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    // 解析 Python 传过来的参数</span></span>
<span class="line"><span style="color:#babed8;">    if (!PyArg_ParseTuple(args, &quot;s&quot;, &amp;text))</span></span>
<span class="line"><span style="color:#babed8;">        return NULL;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    myPrint(text);</span></span>
<span class="line"><span style="color:#babed8;">    return Py_None;</span></span>
<span class="line"><span style="color:#babed8;">}</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">static PyMethodDef ExtestMethods[] =</span></span>
<span class="line"><span style="color:#babed8;">{</span></span>
<span class="line"><span style="color:#babed8;">    { &quot;myPrint&quot;, _myPrint, METH_VARARGS },</span></span>
<span class="line"><span style="color:#babed8;">    { NULL, NULL },</span></span>
<span class="line"><span style="color:#babed8;">};</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">PyMODINIT_FUNC initmyprint(void) {</span></span>
<span class="line"><span style="color:#babed8;">    (void)Py_InitModule(&quot;myprint&quot;, ExtestMethods);</span></span>
<span class="line"><span style="color:#babed8;">}</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><ul><li>wrapper 函数 _myPrint。它负责将 Python 的参数转化为C/C++的参数（PyArg_ParseTuple），然后调用实际的 myPrint，并处理 myPrint 的返回值，最终返回给Python环境。需要注意的是，C/C++ 中无返回值时，不能直接返回 NULL，而是需要返回 Py_None。</li><li>导出表 ExtestMethods。它负责告诉Python这个模块里有哪些函数可以被 Python 调用。导出表的名字可以随便起，每一项有4个参数：第一个参数是提供给 Python 环境的函数名称，第二个参数是_myPrint，即 wrapper 函数。第三个参数的含义是参数变长，第四个参数是一个说明性的字符串。导出表总是以{NULL, NULL, 0, NULL}结束。说明，第 3 和 4 个参数可以省略。</li><li>导出函数 initmyprint。这个的名字不是任取的，是你的 module 名称添加前缀init。导出函数中将模块名称与导出表进行连接。</li></ul><p>扩展模块和纯 python 模块有点不太一样，我们导入的 package 名字与 setup() 的 <code>packages</code> 或者 <code>package_dir</code> 参数是一致的，但是扩展模块的名字是由 <code>Extension</code> 实例的 <code>name</code> 参数决定的，且需要和导出函数对应的initxxx 名字以及 <code>Py_InitModule</code> 方法对应的第一个参数相同。</p><p>最后，我们需要编写 setup 脚本编译我们的 cpp 文件为 so 动态链接库，并进行相应的封装。运行 <code>python setup.py install</code>，setuptools 会帮我们自动编译。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">from setuptools import setup, Extension, find_packages</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"># package name, import NAME</span></span>
<span class="line"><span style="color:#babed8;">NAME = &quot;foo&quot;</span></span>
<span class="line"><span style="color:#babed8;">VERSION = &#39;1.0.0&#39;</span></span>
<span class="line"><span style="color:#babed8;"># an Extension instance list</span></span>
<span class="line"><span style="color:#babed8;">EXT_MODULES = [ </span></span>
<span class="line"><span style="color:#babed8;">                Extension(</span></span>
<span class="line"><span style="color:#babed8;">                    name = &#39;myprint&#39; </span></span>
<span class="line"><span style="color:#babed8;">                    , sources=[&#39;src/foo.cpp&#39;,&#39;src/PythonWrapAPI.cpp&#39;]</span></span>
<span class="line"><span style="color:#babed8;">                    , include_dirs = [&#39;src&#39;]</span></span>
<span class="line"><span style="color:#babed8;">                    )   </span></span>
<span class="line"><span style="color:#babed8;">                ]</span></span>
<span class="line"><span style="color:#babed8;">setup(name = NAME</span></span>
<span class="line"><span style="color:#babed8;">    , version = VERSION</span></span>
<span class="line"><span style="color:#babed8;">    , ext_modules = EXT_MODULES</span></span>
<span class="line"><span style="color:#babed8;">    , )</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><p><code>ext_modules</code> 是一个 <code>Extension</code> 实例列表，Extension 的参数 sources 用于指定所有源文件位置，include_dirs 指定头文件位置，同时还可以使用 library_dirs 和 libraries 指定外部链接库，以及 extra_compile_args 指定额外的编译参数。</p><h1 id="package-元信息参数" tabindex="-1">package 元信息参数 <a class="header-anchor" href="#package-元信息参数" aria-label="Permalink to &quot;package 元信息参数&quot;">​</a></h1><p>在编写一个 package 的时候，尽量提供更多的元信息，这样使用者更加能够了解到 package 的相关信息，并且有些信息会被 PyPi 使用。</p><table><thead><tr><th>元信息</th><th>类型</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>short string</td><td>package 名字, 这里用于 pypi 的显示, 而不是用于 import, import 的包名与 packages 和 package_dir 参数一致</td><td>1</td></tr><tr><td>version</td><td>short string</td><td>package 的发布版本, 建议:major.minor[.patch[.sub]]</td><td>1</td></tr><tr><td>author</td><td>short string</td><td>package 作者名字</td><td>3</td></tr><tr><td>author_email</td><td>short string</td><td>package 作者邮箱</td><td>3</td></tr><tr><td>maintainer</td><td>short string</td><td>package 维护者名字</td><td>3</td></tr><tr><td>maintainer_email</td><td>short string</td><td>package 维护者邮箱</td><td>3</td></tr><tr><td>url</td><td>short string</td><td>package 项目地址</td><td>1</td></tr><tr><td>description</td><td>short string</td><td>简介</td><td></td></tr><tr><td>long_description</td><td>long string</td><td>显示于 pypi 的介绍</td><td></td></tr><tr><td>download_url</td><td>short string</td><td>package 下载地址</td><td>2</td></tr><tr><td>classifiers</td><td>strings list</td><td>分类符, 这样便于 pypi 索引, 由 pypi 固定提供, <a href="https://pypi.python.org/pypi?%3Aaction=list_classifiers" target="_blank" rel="noreferrer">https://pypi.python.org/pypi?%3Aaction=list_classifiers</a></td><td>2</td></tr><tr><td>platforms</td><td>strings list</td><td>支持的平台列表</td><td></td></tr><tr><td>license</td><td>short string</td><td>授权协议</td><td></td></tr></tbody></table><p>1.必填 2.如果为了兼容 2.2.3 或 2.3 版本，不建议使用此字段 3.如果提供了 maintainer，那么 distutils 会将其加入 PKG-INFO</p><h1 id="package-内容参数" tabindex="-1">package 内容参数 <a class="header-anchor" href="#package-内容参数" aria-label="Permalink to &quot;package 内容参数&quot;">​</a></h1><h2 id="py-modules-列举每个模块" tabindex="-1">py_modules 列举每个模块 <a class="header-anchor" href="#py-modules-列举每个模块" aria-label="Permalink to &quot;py_modules 列举每个模块&quot;">​</a></h2><p>py_modules 是一个字符串列表，用于指定所有的模块，即 py 文件模块。 如果你只是发布几个脚本文件而已，特别是它们逻辑上不属于同一个 package。</p><p>比如，<code>py_modules = [&#39;mod1&#39;, &#39;pkg.mod2&#39;]</code>。这指定了两个模块，一个位于 <code>root package</code>，而另一个位于 <code>pkg package</code>。如果没有使用 <code>package_dir</code> 重新映射 package 和目录的关系的话，那么这两个模块分别对应了 <code>mod1.py</code> 以及 <code>pkg/mod2.py</code> 文件，并且在 pkg 文件夹下还存在 <code>__init__.py</code> 文件。</p><h2 id="package-列举每个包" tabindex="-1">package 列举每个包 <a class="header-anchor" href="#package-列举每个包" aria-label="Permalink to &quot;package 列举每个包&quot;">​</a></h2><p>如果你需要发布的模块文件太多，使用 <code>py_modules</code> 一个一个指定比较麻烦，特别是模块位于多个包中，那么你可以使用 <code>packages</code> 指定整个包。</p><p>packages 是一个包名列表，packages 参数告诉 Setuptools 处理列举出的 package 下所有纯 python 模块。在文件系统中，默认地，package 的名字与目录是一一对应的，也就是说，<code>packages = [&#39;foo&#39;]</code>，Setuptools 会去查找 <code>foo/__init__.py</code> 文件。</p><h2 id="package-dir-重新映射-package-和目录的关系" tabindex="-1">package_dir 重新映射 package 和目录的关系 <a class="header-anchor" href="#package-dir-重新映射-package-和目录的关系" aria-label="Permalink to &quot;package_dir 重新映射 package 和目录的关系&quot;">​</a></h2><p>当你想要重命名你的 package 所在的文件夹，或者想要移动整个 package 到其他目录下，一般情况下，一旦你的源代码布局改变，你需要重新修改 packages。但是 package_dir 可以重新映射 package 和目录的关系。比如你将 root package 下的模块和 package 移到 lib 目录下，那么你只需要在 package_dir 中将 root package 映射到 lib 下。比如 <code>package_dir = {&#39;&#39;: &#39;lib&#39;}</code></p><p>再举个例子，比如一下目录结果，当我使用 <code>package_dir= {&#39;bar&#39;:&#39;foobar&#39;}</code> 和 packages= [&#39;bar&#39;]时，Setuptools 根据 <code>packages</code> 参数查找 bar package 时，会在 foobar 文件夹下找相应的 <code>__init__.py</code> 文件。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">package_dir</span></span>
<span class="line"><span style="color:#babed8;">├── foobar</span></span>
<span class="line"><span style="color:#babed8;">│   ├── bar.py</span></span>
<span class="line"><span style="color:#babed8;">│   └── __init__.py</span></span>
<span class="line"><span style="color:#babed8;">└── setup.py</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><ul><li>注意，package_dir 会影响 packages 下列出的所有 package，比如，<code>packages =[&#39;bar&#39;, &#39;bar.lib&#39;]</code>，package_dir 不仅会影响所有和 bar 有关的 package，<code>bar.lib</code> 也会相应被映射到 <code>foorbar.lib</code>。</li></ul><h2 id="install-requires-和-dependency-links-安装依赖模块" tabindex="-1">install_requires 和 dependency_links 安装依赖模块 <a class="header-anchor" href="#install-requires-和-dependency-links-安装依赖模块" aria-label="Permalink to &quot;install_requires 和 dependency_links 安装依赖模块&quot;">​</a></h2><p><code>install_requires</code> 可以声明 package 安装时所需的依赖模块及其版本。安装 package 时，Setuptools 便能够从 PyPi 上自动下载其所依赖的模块，并且将依赖信息包含进 Python Eggs 中。</p><p>比如我们在自己的 package 中用到了一个 python 非标准库 pycurl 和 xmltodict，当我们的 package 在别的机器上使用时便会报错。为了解决这个问题，我们可以使用 <code>install_requires = [&#39;pycurl&#39;, &#39;xmltodict&#39;]</code> 将 pycurl 和 xmltodict 加入 package 依赖。</p><p><code>install_requires</code> 可以是 string 或 string list，指明所需要依赖的模块。当 <code>install_requires</code> 为 string 类型，并且依赖多于 1 个时，每个依赖的声明都要另起一行。</p><p>最新版本的 Setuptools 的<code>install_requires</code> 有另外两个作用： 1.在运行时，任何脚本都会检查其依赖模块的正确性，并且确保正确的依赖版本都加入到 sys.path 中（假如有多个版本的话）。 2.Python Egg distributions 将会包含依赖相关的元信息。</p><p>前面说到，Setuptools 便能够从 PyPi 上自动下载其所依赖的模块，但是在某些环境下无法正常访问 Pypi 下，我们也可以通过 <code>dependency_links</code> 参数 指定到自己的 python 源，这样便可以解决下载问题。 比如，<code>dependency_links = [&#39;http://xxx/xmltodict&#39;, &#39;http://xxx/pycurl&#39;]</code>。 dependency_links 是一个字符串列表，包含了依赖的下载 URL。</p><p>Setuptools 对链接的支持比较强大！ 下载的资源可以满足以下条件：</p><ul><li>通过 python setup.py sdist 进行分发的压缩文件，默认情况下在 linux 为 .tar.gz，在 windows 为 zip</li><li>单一的 py 文件</li><li>VCS 仓库（Subversion, Mercurial, Git）</li></ul><p>URL 链接可以是：</p><ul><li>可以直接下载的 URL</li><li>包含资源下载链接的网页 URL</li><li>仓库 URL</li></ul><p>当包含资源下载链接的网页 URL 中存在多个版本时，Setuptools 会根据版本要求下载合适的版本。 一般，比较好的方式是网页 URL 方式。我们也可以使用 SourceForge 的 showfiles.php 链接来下载我们所依赖的模块。 如果依赖的模块是一个 py 文件时，你必须在 URL 添加 <code>&quot;#egg=project-version&quot;</code> 后缀，以指出模块的名字和版本，另外需要确保将模块名和版本中出现的 <code>-</code> 替换为 <code>_</code>。EasyInstall 将会识别这个后缀并且自动创建一个 setup.py 脚本，将我们的 py 文件包装为 egg 文件。如果为 VCS，将会 checkout 对应的版本，创建一个临时文件夹并执行 setup.py bdist_egg，安装所需的依赖。</p><p>在使用 VCS 的情况下，你也可以使用 <code>#egg=project-version</code> 指定要使用的版本。你可以通过在 <code>#egg=project-version</code> 前加入 <code>@REV</code> 来指定要 checkout 的版本。另外你也可以通过在 URL 前加上以下标识显式声明 URL 使用 的是 VCS：</p><ul><li>Subversion：<code>svn+URL</code></li><li>Git：<code>git+URL</code></li><li>Mercurial：<code>hg+URL</code></li></ul><p>因此使用 VCS 更复杂的一个示例为： <code>vcs+proto://host/path@revision#egg=project-version</code></p><h2 id="ext-module-python-调用-c-c" tabindex="-1">ext_module Python 调用 C/C++ <a class="header-anchor" href="#ext-module-python-调用-c-c" aria-label="Permalink to &quot;ext_module Python 调用 C/C++&quot;">​</a></h2><p>Python 的可扩展性特别强，不仅支持 python 语言的扩展模块，而且支持其他语言的扩展。 Python 调用 C++ 的详细文档可以查看 <a href="https://docs.python.org/2/extending/building.html" target="_blank" rel="noreferrer">https://docs.python.org/2/extending/building.html</a> 这里假设已经懂得怎么调用 C++ 方法了，接下来只需要使用 ext_module 参数，使 Setuptools 能够编译和安装扩展模块了。 <code>ext_module</code> 参数是一个 Extension 实例列表，Extension 类似于 gcc/g++ 的所需参数，包含了指定源文件、头文件、依赖的静态库或动态库、额外的编译参数、宏定义等功能。</p><h3 id="name-扩展模块名字" tabindex="-1">name 扩展模块名字 <a class="header-anchor" href="#name-扩展模块名字" aria-label="Permalink to &quot;name 扩展模块名字&quot;">​</a></h3><p><code>name</code> 是一个字符串，用于指定扩展模块的名字。 <code>packages</code> 和 <code>package_dir</code> 用于支持 python 语言编写模块，其 import 语句使用的包名与 <code>packages</code> 和 <code>package_dir</code> 中所指定的名字是一致的。但是扩展模块的名字是由 <code>Extension</code> 实例的 <code>name</code> 参数决定的，且需要和导出函数对应的initxxx 名字以及 <code>Py_InitModule</code> 方法对应的第一个参数相同。定义好模块的名字 xxx 后，我们便可以使用 <code>import xxx</code> 使用我们自己的模块了。</p><h3 id="sources-和-include-dirs" tabindex="-1">sources 和 include_dirs <a class="header-anchor" href="#sources-和-include-dirs" aria-label="Permalink to &quot;sources 和 include_dirs&quot;">​</a></h3><p><code>sources</code> 为用于指定要编译源文件的字符串列表，比如，<code>sources=[&#39;foo/foo.cpp&#39;, &#39;bar/bar.cpp&#39;]</code>，Setuptools 支持 C/C++ 以及 Objective-C。 <code>include_dirs</code> 为用于指定编译需要的头文件目录的字符串列表，比如，<code>include_dirs=[&#39;foo/include&#39;, &#39;bar/include&#39;]</code>。如果头文件位于 distribution root 目录，需要使用 <code>&#39;.&#39;</code> 表示头文件位于当前目录，不能为 <code>&#39;&#39;</code>，否则将找不到头文件。 另外还支持 <code>extra_objects</code> 向链接程序传递 object 文件，比如 <code>.o</code> 文件。</p><h3 id="define-macros-和-undef-macros" tabindex="-1">define_macros 和 undef_macros <a class="header-anchor" href="#define-macros-和-undef-macros" aria-label="Permalink to &quot;define_macros 和 undef_macros&quot;">​</a></h3><p>gcc 支持在编译的时候定义新的宏变量和取消某个宏变量的定义，具体的选项 <code>[-Dmacro[=defn]...] [-Umacro]</code>。Extension 也支持这样的选项。 你可以使用 <code>define_macros</code> 和 <code>undef_macros</code> 定义新的宏变量和取消某个宏变量的定义。 <code>define_macros</code> 是一个 <code>(name, value)</code> 元组列表，其中的 name 为宏变量名字符串，value 为对应的值，可以为字符串、数字或为 None 类型（说明：官方文档没有声明 <code>value</code> 可以为数字，但是经过测试，只要是 python 支持的数字类型都可以用于 <code>value</code>，但是最好还是使用字符串的形式，这样脚本的兼容性会更好）. 比如，<code>define_macros=[(&#39;DEBUG&#39;, None), (&#39;FOO&#39;, &#39;1&#39;), (&#39;BAR&#39;, 2), (&#39;FOOBAR&#39;, &#39;&quot;abc&quot;&#39;)]</code>，gcc 对应的编译选项结果为 <code>-DDEBUG -DFOO=1 -DBAR=2 -DFOOBAR=&quot;abc&quot;</code>。 <code>undef_macros</code> 比 <code>define_macros</code> 简单得多，它就是一个宏变量字符串列表，举个例子，我们想要取消以上定义的宏变量，对应的 undef_macros 值为 <code>undef_macros=[&#39;DEBUG&#39;, &#39;FOO&#39;, &#39;BAR&#39;, &#39;FOOBAR&#39;]</code>。</p><h3 id="libraries-和-library-dirs" tabindex="-1">libraries 和 library_dirs <a class="header-anchor" href="#libraries-和-library-dirs" aria-label="Permalink to &quot;libraries 和 library_dirs&quot;">​</a></h3><p>Setuptools 对 C/C++ 库的引用方法和 gcc 一样，具体的规则可以参考 gcc。 libraries 为要添加的库的名字字符串列表，而 library_dirs 为要添加的库所在的目录，举个例子：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">.</span></span>
<span class="line"><span style="color:#babed8;">├── setup.py</span></span>
<span class="line"><span style="color:#babed8;">└── curl</span></span>
<span class="line"><span style="color:#babed8;">    ├── include</span></span>
<span class="line"><span style="color:#babed8;">        ├── curl.h</span></span>
<span class="line"><span style="color:#babed8;">        ├── test.h</span></span>
<span class="line"><span style="color:#babed8;">    ├── lib</span></span>
<span class="line"><span style="color:#babed8;">        ├── libcurl.a</span></span>
<span class="line"><span style="color:#babed8;">        ├── libtest.a</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><p>其对应的参数为 <code>libraries=[&#39;curl&#39;, &#39;test&#39;]</code>、<code>library_dirs=[&#39;curl/lib&#39;]</code>、<code>include_dirs=[‘curl/include’]</code></p><p>注意：在实际的使用过程中碰到过一个链接错误的坑，Setuptools 在编译的时候报错：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">libcurl.a : relocation against .rodata can not be used when making a shared object:recompile with -fPIC</span></span>
<span class="line"><span style="color:#babed8;">libcurl.a : could not read symbols:Bad value</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><p>前面提到，python 在创建扩展模块时会将源文件编译为动态链接库，动态链接库在加载的时候，内存位置是不固定的，所以我们链接的外部库代码也需要全部使用相对地址，这样代码便可以加载到内存的任意位置。因为有的库没有使用 <code>-fPIC</code> 选项进行编译，导致库最终在链接到 so 文件时报错。</p><p>解决方案是使用 <code>-fPIC</code> 重新编译 <code>libcurl.a</code> 库。</p><h3 id="extra-compile-args" tabindex="-1">extra_compile_args <a class="header-anchor" href="#extra-compile-args" aria-label="Permalink to &quot;extra_compile_args&quot;">​</a></h3><p>在编译扩展模块时，Setuptools 会自动指定编译参数，比如下面一个模块的编译：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">gcc -pthread -fno-strict-aliasing -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -DNDEBUG -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -fPIC -DDEBUG -DFOO=1 -DBAR=2 -DFOOBAR=&quot;abc&quot; -Isrc -I/usr/include/python2.6 -c src/foo.cpp -o build/temp.linux-x86_64-2.6/src/foo.o</span></span>
<span class="line"><span style="color:#babed8;">gcc -pthread -fno-strict-aliasing -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -DNDEBUG -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -fPIC -DDEBUG -DFOO=1 -DBAR=2 -DFOOBAR=&quot;abc&quot; -Isrc -I/usr/include/python2.6 -c src/PythonWrapAPI.cpp -o build/temp.linux-x86_64-2.6/src/PythonWrapAPI.o</span></span>
<span class="line"><span style="color:#babed8;">g++ -pthread -shared build/temp.linux-x86_64-2.6/src/foo.o build/temp.linux-x86_64-2.6/src/PythonWrapAPI.o -L/usr/lib64 -lpython2.6 -o build/lib.linux-x86_64-2.6/myprint.so</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><p>这么多的编译参数绝大部分是 Setuptools 自动指定的，但是如果我们还想要在每个文件的编译再加上额外的编译选项，可以使用 <code>extra_compile_args</code> 和 <code>extra_link_args</code>，其中 <code>extra_link_args</code> 选项用于链接。 <code>extra_compile_args</code> 是一个编译选项字符串列表，每个编译选项都要单独作为一个字符串，不能并在一起，否则会报错。</p><h1 id="创建源码分发" tabindex="-1">创建源码分发 <a class="header-anchor" href="#创建源码分发" aria-label="Permalink to &quot;创建源码分发&quot;">​</a></h1><p>建议使用源码分发的形式发布你的包，而不是二进制发布形式，这样包将更方便跨平台。</p><h2 id="sdist-命令" tabindex="-1">sdist 命令 <a class="header-anchor" href="#sdist-命令" aria-label="Permalink to &quot;sdist 命令&quot;">​</a></h2><p>创建源码分发的命令为：<code>python setup.py sdist</code>，命令执行后会创建 dist 目录，收集一些必要的文件以及 setup 脚本，生成一个压缩文件，用户安装时，只需要解压，然后执行 <code>python setup.py install</code> 命令，将进行编译和安装，将相应的文件存放到 python 第三方库目录下。</p><p>sdist 比较常用的一个选项是 <code>--format</code>，选择压缩的格式。比如，使用 zip 进行压缩，<code>python setup.py sdist --format=zip</code>。</p><table><thead><tr><th>格式</th><th>后缀</th></tr></thead><tbody><tr><td>zip</td><td>.zip</td></tr><tr><td>gztar</td><td>.tar.gz</td></tr><tr><td>bztar</td><td>.tar.bz2</td></tr><tr><td>ztar</td><td>.tar.Z</td></tr><tr><td>tar</td><td>.tar</td></tr></tbody></table><p>说明：<code>python setup.py sdist --format=zip, tar</code>，Setuptools 会分别使用 zip 和 tar 进行压缩，将同时产生两个压缩文件。</p><p>setuptools 和 distutils 对于文件查找的算法是一样的：</p><ul><li>所有在 <code>py_modules</code> 和 <code>packages</code> 指定的对应模块文件</li><li>所有在 <code>ext_modules</code> 和 <code>libraries</code> 选项指定的源文件和库</li><li><code>scripts</code> 选项指定的脚本文件</li><li>所有类似测试脚本的文件，比如：test/test*.py (低版本的包管理工具可能不支持)</li><li>README.txt（或 README），setup.py 以及 setup.cfg（README 文件目前无法支持更多的后缀格式）</li><li><code>package_data</code> 选项指定的文件</li><li><code>data_files</code> 选项指定的文件</li></ul><p>另外在使用过程中，遇到 Setuptools 的一个巨坑，确实可以包含文件，但是它并不总能包含文件，这是有前提的。</p><p>bdist是发布二进制文件，sdist是发布源文件。而在旧版本的 python 中(2.7 以前)， package_data只有在使用 bdist 时候才有用，也就是如果使用 sdist，是无法正确包含文件的。而在新版本中，会自动把package_data 里面的内容添加到 MANIFEST 文件中。</p><h2 id="manifest-in-模版文件" tabindex="-1">MANIFEST.in 模版文件 <a class="header-anchor" href="#manifest-in-模版文件" aria-label="Permalink to &quot;MANIFEST.in 模版文件&quot;">​</a></h2><p>当我们使用 sdist 进行分发包时，如果需要包含额外的文件，可以使用 <code>MANIFEST.in</code> 文件，在该文件中列举出需要包含的文件。当我们执行 sdist 时，将会对 <code>MANIFEST.in</code> 文件进行检查，读取解释并生成 MANIFEST 文件，该文件列举了所有需要包含进包的文件。位于 distribution root 下的 MANIFEST.in 文件每行对应一条包含一系列文件的命令。</p>`,103),t=[p];function l(c,d,i,r,b,u){return s(),e("div",null,t)}const g=a(o,[["render",l]]);export{h as __pageData,g as default};
