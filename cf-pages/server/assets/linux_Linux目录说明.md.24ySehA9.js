import{_ as o,c as e,o as a,a5 as c}from"./chunks/framework.CJNr4pYi.js";const q=JSON.parse('{"title":"Linux 目录说明","description":"","frontmatter":{},"headers":[],"relativePath":"linux/Linux目录说明.md","filePath":"linux/Linux目录说明.md","lastUpdated":1739150533000}'),t={name:"linux/Linux目录说明.md"},d=c('<h1 id="linux-目录说明" tabindex="-1">Linux 目录说明 <a class="header-anchor" href="#linux-目录说明" aria-label="Permalink to &quot;Linux 目录说明&quot;">​</a></h1><h2 id="根目录-——-一切的起点" tabindex="-1"><code>/</code> 根目录 —— 一切的起点 <a class="header-anchor" href="#根目录-——-一切的起点" aria-label="Permalink to &quot;`/` 根目录 —— 一切的起点&quot;">​</a></h2><blockquote><p>Linux文件系统是以“/”为根的层级式树状结构，所有的文件和目录都置于根目录之下。根目录是整个文件系统的顶级目录，它包含所有其他重要的子目录，并且是系统启动时最先被加载的部分。</p></blockquote><h2 id="bin-——-用户可执行命令存放地" tabindex="-1"><code>/bin</code> —— 用户可执行命令存放地 <a class="header-anchor" href="#bin-——-用户可执行命令存放地" aria-label="Permalink to &quot;`/bin` —— 用户可执行命令存放地&quot;">​</a></h2><blockquote><p><code>/bin</code> 目录主要用于存放普通用户可以执行的基本命令程序，如 ls、cp 等。这些命令在日常操作中非常常用，是确保系统能够正常运行的基础工具之一。为了保证系统启动后即可使用这些基本命令，在根文件系统中必须包含 <code>/bin</code>。</p></blockquote><h2 id="boot-——-启动引导文件仓库" tabindex="-1"><code>/boot</code> —— 启动引导文件仓库 <a class="header-anchor" href="#boot-——-启动引导文件仓库" aria-label="Permalink to &quot;`/boot` —— 启动引导文件仓库&quot;">​</a></h2><blockquote><p><code>/boot</code> 是一个至关重要的目录，它保存了操作系统启动所需的内核文件和其他引导文件。例如，GRUB或LILO等引导加载器的相关配置也存放在这个目录下。当计算机启动时，BIOS会读取硬盘上的MBR（主引导记录），进而加载 <code>/boot</code> 中的内容来启动操作系统。</p></blockquote><h2 id="etc-——-系统配置中心" tabindex="-1"><code>/etc</code> —— 系统配置中心 <a class="header-anchor" href="#etc-——-系统配置中心" aria-label="Permalink to &quot;`/etc` —— 系统配置中心&quot;">​</a></h2><blockquote><p><code>/etc</code> 目录是Linux系统的神经中枢，这里存放着几乎所有与系统管理相关的静态配置文件。从用户的账户信息到网络接口设置，再到服务进程的启动参数，都可以在这里找到对应的配置文件。对于系统管理员来说，这里是进行系统管理和维护的核心区域。</p></blockquote><h2 id="home-——-用户个人空间" tabindex="-1"><code>/home</code> —— 用户个人空间 <a class="header-anchor" href="#home-——-用户个人空间" aria-label="Permalink to &quot;`/home` —— 用户个人空间&quot;">​</a></h2><blockquote><p><code>/home</code> 目录用于存放普通用户的主目录，每位用户都有自己的子目录来存储个人文件、设置以及应用程序数据。这不仅有助于保持系统的整洁有序，也为用户提供了一个相对独立的工作环境。</p></blockquote><h2 id="lib-和-lib64-——-动态链接库的家园" tabindex="-1"><code>/lib</code> 和 <code>/lib64</code> —— 动态链接库的家园 <a class="header-anchor" href="#lib-和-lib64-——-动态链接库的家园" aria-label="Permalink to &quot;`/lib` 和 `/lib64` —— 动态链接库的家园&quot;">​</a></h2><blockquote><p><code>/lib</code> 及其对应的64位版本<code> /lib64</code> 是共享标准程序库的存放目录，类似于Windows中的DLL文件。几乎所有的应用程序都需要调用这些库中的函数才能正常工作。特别地，<code>/lib</code> 主要存放32位库，而 <code>/lib64</code> 则专为64位架构设计，以支持不同类型的硬件平台。</p></blockquote><h2 id="mnt-——-外部设备挂载点" tabindex="-1"><code>/mnt</code> —— 外部设备挂载点 <a class="header-anchor" href="#mnt-——-外部设备挂载点" aria-label="Permalink to &quot;`/mnt` —— 外部设备挂载点&quot;">​</a></h2><blockquote><p><code>/mnt</code> 目录提供了一个统一的标准位置用于挂载外部存储设备，如U盘、光驱、网络文件系统等。虽然现代Linux发行版通常会在 <code>/media</code> 下自动创建挂载点，但 <code>/mnt</code> 仍然保留作为手动挂载的选择之一。它允许用户将其他文件系统临时连接到当前系统中。</p></blockquote><h2 id="opt-——-第三方软件安装区" tabindex="-1">/opt —— 第三方软件安装区 <a class="header-anchor" href="#opt-——-第三方软件安装区" aria-label="Permalink to &quot;/opt —— 第三方软件安装区&quot;">​</a></h2><blockquote><p>/opt 目录主要用于存放那些不属于操作系统核心组件的附加软件包。这里的软件通常是大型、复杂或者商业性质的应用程序，它们被组织成各自的子目录，以便于独立管理和更新。通过这种方式，可以有效避免与其他系统组件产生冲突。</p></blockquote><h2 id="proc-——-内存映射的虚拟文件系统" tabindex="-1"><code>/proc</code> —— 内存映射的虚拟文件系统 <a class="header-anchor" href="#proc-——-内存映射的虚拟文件系统" aria-label="Permalink to &quot;`/proc` —— 内存映射的虚拟文件系统&quot;">​</a></h2><blockquote><p><code>/proc</code> 是一个特殊的虚拟文件系统，它提供了关于正在运行的进程及系统状态的信息。实际上，该目录下的内容并不实际存在于磁盘上，而是由内核动态生成，反映了系统的实时情况。例如，可以通过查看 <code>/proc/cpuinfo</code> 来获取CPU的具体规格。</p></blockquote><h2 id="root-——-超级用户的家" tabindex="-1"><code>/root</code> —— 超级用户的家 <a class="header-anchor" href="#root-——-超级用户的家" aria-label="Permalink to &quot;`/root` —— 超级用户的家&quot;">​</a></h2><blockquote><p>不同于普通用户的 <code>/home</code>，超级用户（即root用户）的主目录位于 <code>/root</code>。这是出于安全考虑，因为root拥有对系统的完全控制权，所以其工作区需要单独隔离，以防止意外修改关键系统文件。</p></blockquote><h2 id="sbin-——-系统管理员的工具箱" tabindex="-1"><code>/sbin</code> —— 系统管理员的工具箱 <a class="header-anchor" href="#sbin-——-系统管理员的工具箱" aria-label="Permalink to &quot;`/sbin` —— 系统管理员的工具箱&quot;">​</a></h2><blockquote><p><code>/sbin</code> 目录存放的是只有超级用户才能执行的系统管理命令，如 <code>shutdown</code> 、 <code>reboot</code>  等。这些命令对于维护系统的稳定性和安全性至关重要，因此一般用户没有权限访问此目录内的文件。</p></blockquote><h2 id="sys-——-系统核心设备信息收集站" tabindex="-1"><code>/sys</code> —— 系统核心设备信息收集站 <a class="header-anchor" href="#sys-——-系统核心设备信息收集站" aria-label="Permalink to &quot;`/sys` —— 系统核心设备信息收集站&quot;">​</a></h2><blockquote><p><code>/sys</code> 是另一个虚拟文件系统，主要用于收集和展示系统核心设备及其驱动的信息。与 <code>/proc</code> 不同的是，<code>/sys</code> 更加专注于硬件层面的数据，如块设备、总线、内核模块等。这对于开发人员调试驱动程序或编写自动化脚本非常有用。</p></blockquote><h2 id="tmp-——-临时文件的栖息地" tabindex="-1"><code>/tmp</code> —— 临时文件的栖息地 <a class="header-anchor" href="#tmp-——-临时文件的栖息地" aria-label="Permalink to &quot;`/tmp` —— 临时文件的栖息地&quot;">​</a></h2><blockquote><p><code>/tmp</code> 是一个所有用户都能读写的公共空间，专门用来存放临时文件。这些文件可能由应用程序自动生成，也可能由用户手动创建。系统重启后，通常会清空 <code>/tmp</code> 内容，以释放不必要的占用空间。</p></blockquote><h2 id="usr-——-应用程序的大本营" tabindex="-1"><code>/usr</code> —— 应用程序的大本营 <a class="header-anchor" href="#usr-——-应用程序的大本营" aria-label="Permalink to &quot;`/usr` —— 应用程序的大本营&quot;">​</a></h2><blockquote><p><code>/usr</code> 是Linux系统中最大的目录之一，几乎所有的应用程序及其相关资源都被安装在这里。它进一步细分为多个子目录，如 <code>/usr/bin</code> 存放用户命令，<code>/usr/lib</code> 放置程序库，<code>/usr/share</code> 包含文档和其他共享数据等。这种结构化布局使得软件包管理和升级变得更加容易。</p></blockquote><h2 id="var-——-日志与变动数据的归宿" tabindex="-1"><code>/var</code> —— 日志与变动数据的归宿 <a class="header-anchor" href="#var-——-日志与变动数据的归宿" aria-label="Permalink to &quot;`/var` —— 日志与变动数据的归宿&quot;">​</a></h2><blockquote><p>最后，<code>/var</code> 目录负责保存那些经常变化的数据文件，比如日志记录、邮件队列、数据库文件等。由于这类数据频繁更新，将其与静态文件分开存放有助于提高性能并简化备份流程。</p></blockquote>',31),r=[d];function l(i,n,b,h,u,s){return a(),e("div",null,r)}const k=o(t,[["render",l]]);export{q as __pageData,k as default};
