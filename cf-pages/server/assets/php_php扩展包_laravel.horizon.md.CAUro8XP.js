import{_ as a,c as o,o as r,a5 as e}from"./chunks/framework.CJNr4pYi.js";const u=JSON.parse('{"title":"laravel/horizon","description":"","frontmatter":{},"headers":[],"relativePath":"php/php扩展包/laravel.horizon.md","filePath":"php/php扩展包/laravel.horizon.md","lastUpdated":1722327281000}'),i={name:"php/php扩展包/laravel.horizon.md"},t=e('<h1 id="laravel-horizon" tabindex="-1">laravel/horizon <a class="header-anchor" href="#laravel-horizon" aria-label="Permalink to &quot;laravel/horizon&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>队列监控 Horizon。<br> Horizon 是 Laravel 生态圈里的一员，为 Laravel Redis 队列提供了一个漂亮的仪表板，允许我们很方便地查看和管理 Redis 队列任务执行的情况。</p><h2 id="composer地址" tabindex="-1">composer地址 <a class="header-anchor" href="#composer地址" aria-label="Permalink to &quot;composer地址&quot;">​</a></h2><p><a href="https://packagist.org/packages/laravel/horizon" target="_blank" rel="noreferrer">https://packagist.org/packages/laravel/horizon</a></p><h2 id="操作方法" tabindex="-1">操作方法 <a class="header-anchor" href="#操作方法" aria-label="Permalink to &quot;操作方法&quot;">​</a></h2><p>安装完成后通过浏览器URL访问控制台：env(&#39;APP_URL&#39;)/horizon。<br> 安装了 Horizon 以后，我们将使用 horizon 命令来启动队列系统和任务监控，无需使用 queue:listen。<br> 需要注意的是，artisan horizon 队列工作的守护进程是一个常驻进程，它不会在你的代码改变时进行重启，当我们修改代码以后，需要在命令行中对其进行重启操作。</p><h2 id="启动" tabindex="-1">启动 <a class="header-anchor" href="#启动" aria-label="Permalink to &quot;启动&quot;">​</a></h2><p>Horizon 是一个监控程序，需要常驻运行，我们可以通过以下命令启动：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>php artisan horizon</span></span></code></pre></div><h2 id="队列监控-horizon-线上部署须知" tabindex="-1">队列监控 Horizon 线上部署须知 <a class="header-anchor" href="#队列监控-horizon-线上部署须知" aria-label="Permalink to &quot;队列监控 Horizon 线上部署须知&quot;">​</a></h2><p>在开发环境中，我们为了测试方便，直接在命令行里调用 artisan horizon 进行队列监控。然而在生产环境中，我们需要配置一个进程管理工具来监控 artisan horizon 命令的执行，以便在其意外退出时自动重启。当服务器部署新代码时，需要终止当前 Horizon 主进程，然后通过进程管理工具来重启，从而使用最新的代码。</p><p>简而言之，生产环境下使用队列需要注意以下问题：</p><ul><li>使用 Supervisor 进程工具进行管理，配置和使用请参照 文档 进行配置；参考地址：<a href="https://learnku.com/docs/laravel/5.8/horizon/3945%EF%BC%9B" target="_blank" rel="noreferrer">https://learnku.com/docs/laravel/5.8/horizon/3945；</a></li><li>每一次部署代码时，需 artisan horizon:terminate 然后再 artisan horizon 重新加载代码；</li><li>线上部署的话，还要注意一个权限控制的问题；</li></ul>',14),n=[t];function l(h,s,p,c,d,_){return r(),o("div",null,n)}const m=a(i,[["render",l]]);export{u as __pageData,m as default};
