import{_ as a,c as n,o as i,a3 as e}from"./chunks/framework.D49FT0pj.js";const k=JSON.parse('{"title":"MySQL 基础操作笔记","description":"","frontmatter":{},"headers":[],"relativePath":"mysql/基础操作笔记.md","filePath":"mysql/基础操作笔记.md","lastUpdated":1746585786000}'),p={name:"mysql/基础操作笔记.md"};function l(t,s,h,d,o,r){return i(),n("div",null,s[0]||(s[0]=[e(`<h1 id="mysql-基础操作笔记" tabindex="-1">MySQL 基础操作笔记 <a class="header-anchor" href="#mysql-基础操作笔记" aria-label="Permalink to &quot;MySQL 基础操作笔记&quot;">​</a></h1><h2 id="json字段创建虚拟列" tabindex="-1">json字段创建虚拟列 <a class="header-anchor" href="#json字段创建虚拟列" aria-label="Permalink to &quot;json字段创建虚拟列&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># orders.shipping_address 是json类型，包含 phone 字段</span></span>
<span class="line"><span>alter table orders add v_shipping_address_phone varchar(20) generated always as (JSON_UNQUOTE(shipping_address-&gt;&#39;$.phone&#39;));</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 查询 v_shipping_address_phone</span></span>
<span class="line"><span>select * FROM orders where v_shipping_address_phone = &#39;13100000000&#39;;</span></span></code></pre></div><h2 id="mysql批量替换某个字段中的部分数据" tabindex="-1">MYSQL批量替换某个字段中的部分数据 <a class="header-anchor" href="#mysql批量替换某个字段中的部分数据" aria-label="Permalink to &quot;MYSQL批量替换某个字段中的部分数据&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># UPDATE 表名test SET 字段data = replace(字段data, ‘aaa’, ‘bbb’) WHERE 条件语句;</span></span>
<span class="line"><span>UPDATE test SET \`data\` = REPLACE(\`data\`,&#39;aaa&#39;, &#39;bbb&#39;) WHERE id IN (7, 8, 9);</span></span></code></pre></div><h2 id="存储引擎" tabindex="-1">存储引擎 <a class="header-anchor" href="#存储引擎" aria-label="Permalink to &quot;存储引擎&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 查看 存储引擎信息，Support = YSE 说明 支持该引擎，Support = DEFAULT 说明 该引擎为默认存储引擎</span></span>
<span class="line"><span>SHOW ENGINES;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 设置InnoDB为默认引擎：在配置文件my.ini中的 [mysqld] 下面加入default-storage-engine=INNODB</span></span></code></pre></div><h2 id="手动清理binlog" tabindex="-1">手动清理binlog <a class="header-anchor" href="#手动清理binlog" aria-label="Permalink to &quot;手动清理binlog&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 查看主库和从库正在使用的binlog是哪个文件</span></span>
<span class="line"><span>show master status;</span></span>
<span class="line"><span>show slave status;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 删除指定日期以前的日志索引中binlog日志文件</span></span>
<span class="line"><span>purge master logs before &#39;2016-09-01 17:20:00&#39;;</span></span>
<span class="line"><span># 删除指定日志文件的日志索引前所有binlog日志文件【删除 日志索引 小于 000022 的所有日志文件】</span></span>
<span class="line"><span>purge master logs to &#39;mysql-bin.000022&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 注意：</span></span>
<span class="line"><span># 时间和文件名一定不可以写错，尤其是时间中的年和文件名中的序号，以防不小心将正在使用的binlog删除！！！</span></span>
<span class="line"><span># 切勿删除正在使用的binlog！！！</span></span></code></pre></div><h2 id="将表a查询出来的数据插入到表b中" tabindex="-1">将表A查询出来的数据插入到表B中 <a class="header-anchor" href="#将表a查询出来的数据插入到表b中" aria-label="Permalink to &quot;将表A查询出来的数据插入到表B中&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INSERT into B (字段1,字段2,字段3.......)</span></span>
<span class="line"><span>SELECT 字段1,字段2,字段3....... FROM A</span></span></code></pre></div><h2 id="数据库备份" tabindex="-1">数据库备份 <a class="header-anchor" href="#数据库备份" aria-label="Permalink to &quot;数据库备份&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqldump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 127.0.0.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 数据库名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件名.sql</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqldump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 127.0.0.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql.sql</span></span></code></pre></div>`,13)]))}const g=a(p,[["render",l]]);export{k as __pageData,g as default};
