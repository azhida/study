# 验证用户输入的密码是否正确，接收客户端提交的密码 $submit_password = $request->password，已加密入库的密码 $saved_password = bcrypt('123456')；
$res = \Hash::check($submit_password, $saved_password);
If ($res == true) {
    Echo  ‘输入密码正确’;
} else {
    Echo  ‘输入密码错误’;
}

# 执行数据库迁移文件并填充数据（注意：会清除之前所有的数据）
php artisan migrate:refresh --seed

# 创建 failed_jobs 表。有时候队列中的任务会失败。Laravel 内置了一个方便的方式来指定任务重试的最大次数。当任务超出这个重试次数后，它就会被插入到 failed_jobs 数据表里面。
php artisan queue:failed-table

# 使用以下 Artisan 命令来生成一个新的队列任务。该命令会在 app/Jobs 目录下生成一个新的类。
php artisan make:job TranslateSlug

# 启动队列系统，队列在启动完成后会进入监听状态（安装了 Horizon 以后，我们将使用 horizon 命令来启动队列系统和任务监控，无需使用 queue:listen）：
php artisan queue:listen

# 安装了 Horizon 以后，我们将使用 horizon 命令来启动队列系统和任务监控，无需使用 queue:listen
php artisan horizon
# 需要注意的是，artisan horizon 队列工作的守护进程是一个常驻进程，它不会在你的代码改变时进行重启，当我们修改代码以后，需要在命令行中对其进行重启操作。
# 如果不重启，可能会遇到未知的问题：如 代码缓存导致修改后的代码未生效 等。

# 队列使用
# 参考：https://learnku.com/courses/laravel-intermediate-training/5.8/using-queues/4178，看完文章，还要特别关注评论区。
# 参考：https://learnku.com/laravel/t/13290/excitement-first-contact-with-the-queue-take-a-look-at-your-mind-and-add-two-questions
# 参考：https://learnku.com/laravel/t/7803/summary-points-use-queues-monitor-queues
# 参考：https://learnku.com/laravel/t/9859/about-queue-duplication-a-problem

# 解决 Windows 系统使用 Homestead 运行 Laravel 本地项目响应缓慢问题
# 参考：https://learnku.com/articles/9009/solve-the-slow-response-problem-of-windows-system-using-homestead-to-run-laravel-local-project

# 话题回复功能我们只允许登录用户使用，未登录用户不显示即可。Laravel Blade 模板提供了一个『视条件加载子模板』的语法：
@includeWhen($boolean, 'view.name', ['some' => 'data'])

# 数据通知频道会在一张数据表里存储所有通知信息。包含了比如通知类型、JSON 格式数据等描述通知的信息。我们会通过查询这张表的内容在应用界面上展示通知。但是在这之前，我们需要先创建这张数据表，Laravel 自带了生成迁移表的命令，执行以下命令即可：
php artisan notifications:table

# 生成通知类。Laravel 中一条通知就是一个类（通常存在 app/Notifications 文件夹里）。
 php artisan make:notification TopicReplied

# 生成消息通知控制器
php artisan make:controller NotificationsController

# Laravel 的辅助方法 snake_case() 会 字符串格式化为下划线命名。

# 中间件的使用：
# 1、创建中间件。运行以下命令，生成中间件类文件：
php artisan make:middleware RecordLastActivedTime
# 2、注册中间件。想让中间件在应用的每个 HTTP 请求期间运行，我们还需要在 app/Http/Kernel.php 类中对中间件进行注册。
