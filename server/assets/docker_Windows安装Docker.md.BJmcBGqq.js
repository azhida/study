import{_ as e,c as a,o as s,a5 as i}from"./chunks/framework.CJNr4pYi.js";const F=JSON.parse('{"title":"Windows 安装 Docker","description":"","frontmatter":{},"headers":[],"relativePath":"docker/Windows安装Docker.md","filePath":"docker/Windows安装Docker.md","lastUpdated":1741061177000}'),t={name:"docker/Windows安装Docker.md"},l=i(`<h1 id="windows-安装-docker" tabindex="-1">Windows 安装 Docker <a class="header-anchor" href="#windows-安装-docker" aria-label="Permalink to &quot;Windows 安装 Docker&quot;">​</a></h1><p>docker 版本 v4.21.1</p><h2 id="官网下载安装包" tabindex="-1">官网下载安装包 <a class="header-anchor" href="#官网下载安装包" aria-label="Permalink to &quot;官网下载安装包&quot;">​</a></h2><p><a href="https://www.docker.com/" target="_blank" rel="noreferrer">官网</a></p><p><a href="https://docs.docker.com/desktop/windows/install/" target="_blank" rel="noreferrer">安装包下载地址</a></p><h2 id="docker-desktop-更改安装目录" tabindex="-1">docker desktop 更改安装目录 <a class="header-anchor" href="#docker-desktop-更改安装目录" aria-label="Permalink to &quot;docker desktop 更改安装目录&quot;">​</a></h2><p>desktop 默认是安装到 <code>C:\\Program Files\\Docker</code> 下的，无法更改，但是可以用创建联接的方式改变。</p><h3 id="_1-docker-未安装" tabindex="-1">1 Docker 未安装 <a class="header-anchor" href="#_1-docker-未安装" aria-label="Permalink to &quot;1 Docker 未安装&quot;">​</a></h3><ul><li>创建目录 <code>D:\\Docker</code></li><li>以管理员身份打开cmd</li><li>执行命令</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mklink /j &quot;C:\\Program Files\\Docker&quot; &quot;D:\\Docker&quot;</span></span></code></pre></div><h3 id="_2-docker-已安装" tabindex="-1">2 Docker 已安装 <a class="header-anchor" href="#_2-docker-已安装" aria-label="Permalink to &quot;2 Docker 已安装&quot;">​</a></h3><ul><li>先停止 docker 服务</li><li>剪切 <code>C:\\Program Files\\Docker</code> 到 <code>D:\\Docker</code></li><li>以管理员身份打开cmd并执行下列操作</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mklink /j &quot;C:\\Program Files\\Docker&quot; &quot;D:\\Docker&quot;</span></span></code></pre></div><h2 id="更改-docker-镜像存储位置" tabindex="-1">更改 docker 镜像存储位置 <a class="header-anchor" href="#更改-docker-镜像存储位置" aria-label="Permalink to &quot;更改 docker 镜像存储位置&quot;">​</a></h2><ul><li>启动 docker</li><li>打开设置 Resources/Advanced</li><li>修改 <code>Disk image location</code> 的位置</li><li>保存重启即可</li></ul><h2 id="docker-启动失败解决办法" tabindex="-1">docker 启动失败解决办法 <a class="header-anchor" href="#docker-启动失败解决办法" aria-label="Permalink to &quot;docker 启动失败解决办法&quot;">​</a></h2><h3 id="当前计算机配置不支持-wsl2" tabindex="-1">当前计算机配置不支持 WSL2 <a class="header-anchor" href="#当前计算机配置不支持-wsl2" aria-label="Permalink to &quot;当前计算机配置不支持 WSL2&quot;">​</a></h3><p>强制修复 Hyper-V 和 WSL2 配置</p><p>重置 Hyper-V 和 WSL2 的步骤：</p><ul><li>1、禁用 Hyper-V 和虚拟机平台功能：（powerSheel中管理员执行）</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dism.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /online</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /disable-feature</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /featurename:Microsoft-Hyper-V</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /norestart</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dism.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /online</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /disable-feature</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /featurename:VirtualMachinePlatform</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /norestart</span></span></code></pre></div><ul><li><p>2、重启计算机。</p></li><li><p>3、重新启用 Hyper-V 和虚拟机平台：</p></li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dism.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /online</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /enable-feature</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /featurename:Microsoft-Hyper-V</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /all</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /norestart</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dism.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /online</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /enable-feature</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /featurename:VirtualMachinePlatform</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /all</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /norestart</span></span></code></pre></div><ul><li>4、再次重启。</li></ul><p>到此，wsl 的功能就正常了，重装 wsl ubuntu</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wsl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span></span></code></pre></div><p>参考：<a href="https://www.bilibili.com/opus/1019354674641240088" target="_blank" rel="noreferrer">docker启动失败之当前计算机配置不支持 WSL2</a></p>`,27),o=[l];function n(r,d,h,p,k,c){return s(),a("div",null,o)}const g=e(t,[["render",n]]);export{F as __pageData,g as default};
