import{_ as e,c as d,o as i,a5 as o}from"./chunks/framework.CJNr4pYi.js";const f=JSON.parse('{"title":"Linux 命令","description":"","frontmatter":{},"headers":[],"relativePath":"linux/Linux命令.md","filePath":"linux/Linux命令.md","lastUpdated":1739161759000}'),l={name:"linux/Linux命令.md"},c=o('<h1 id="linux-命令" tabindex="-1">Linux 命令 <a class="header-anchor" href="#linux-命令" aria-label="Permalink to &quot;Linux 命令&quot;">​</a></h1><h2 id="_1、基本命令" tabindex="-1">1、基本命令 <a class="header-anchor" href="#_1、基本命令" aria-label="Permalink to &quot;1、基本命令&quot;">​</a></h2><ul><li><code>uname -m</code> 显示机器的处理器架构</li><li><code>uname -r</code> 显示正在使用的内核版本</li><li><code>dmidecode -q</code> 显示硬件系统部件(SMBIOS / DMI)</li><li><code>hdparm -i /dev/hda</code> 罗列一个磁盘的架构特性</li><li><code>hdparm -tT /dev/sda</code> 在磁盘上执行测试性读取操作系统信息</li><li><code>arch</code> 显示机器的处理器架构</li><li><code>uname -m</code> 显示机器的处理器架构</li><li><code>uname -r</code> 显示正在使用的内核版本</li><li><code>dmidecode -q</code> 显示硬件系统部件 - (SMBIOS / DMI)</li><li><code>hdparm -i /dev/hda</code> 罗列一个磁盘的架构特性</li><li><code>hdparm -tT /dev/sda</code> 在磁盘上执行测试性读取操作</li><li><code>cat /proc/cpuinfo</code> 显示CPU info的信息</li><li><code>cat /proc/interrupts</code> 显示中断</li><li><code>cat /proc/meminfo</code> 校验内存使用</li><li><code>cat /proc/swaps</code> 显示哪些swap被使用</li><li><code>cat /proc/version</code> 显示内核的版本</li><li><code>cat /proc/net/dev</code> 显示网络适配器及统计</li><li><code>cat /proc/mounts</code> 显示已加载的文件系统</li><li><code>lspci -tv</code> 罗列 PCI 设备</li><li><code>lsusb -tv</code> 显示 USB 设备</li><li><code>date</code> 显示系统日期</li><li><code>cal 2007</code> 显示2007年的日历表</li><li><code>date 041217002007.00</code> 设置日期和时间 - 月日时分年.秒</li><li><code>clock -w</code> 将时间修改保存到 BIOS</li></ul><h2 id="_2、关机" tabindex="-1">2、关机 <a class="header-anchor" href="#_2、关机" aria-label="Permalink to &quot;2、关机&quot;">​</a></h2><ul><li><code>shutdown -h now</code> 关闭系统(1)</li><li><code>init 0</code> 关闭系统(2)</li><li><code>telinit 0</code> 关闭系统(3)</li><li><code>shutdown -h hours:minutes &amp;</code> 按预定时间关闭系统</li><li><code>shutdown -c</code> 取消按预定时间关闭系统</li><li><code>shutdown -r now</code> 重启(1)</li><li><code>reboot</code> 重启(2)</li><li><code>logout</code> 注销</li></ul><h2 id="_3、文件和目录" tabindex="-1">3、文件和目录 <a class="header-anchor" href="#_3、文件和目录" aria-label="Permalink to &quot;3、文件和目录&quot;">​</a></h2><ul><li><code>cd /home</code> 进入 &#39;/ home&#39; 目录&#39;</li><li><code>cd ..</code> 返回上一级目录</li><li><code>cd ../..</code> 返回上两级目录</li><li><code>cd</code> 进入个人的主目录</li><li><code>cd ~user1</code> 进入个人的主目录</li><li><code>cd -</code> 返回上次所在的目录</li><li><code>pwd</code> 显示工作路径</li><li><code>ls</code> 查看目录中的文件</li><li><code>ls -F</code> 查看目录中的文件</li><li><code>ls -l</code> 显示文件和目录的详细资料</li><li><code>ls -a</code> 显示隐藏文件</li><li><code>ls *[0-9]*</code> 显示包含数字的文件名和目录名</li><li><code>tree</code> 显示文件和目录由根目录开始的树形结构(1)</li><li><code>lstree</code> 显示文件和目录由根目录开始的树形结构(2)</li><li><code>mkdir dir1</code> 创建一个叫做 &#39;dir1&#39; 的目录&#39;</li><li><code>mkdir dir1 dir2</code> 同时创建两个目录</li><li><code>mkdir -p /tmp/dir1/dir2</code> 创建一个目录树</li><li><code>rm -f file1</code> 删除一个叫做 &#39;file1&#39; 的文件&#39;</li><li><code>rmdir dir1</code> 删除一个叫做 &#39;dir1&#39; 的目录&#39;</li><li><code>rm -rf dir1</code> 删除一个叫做 &#39;dir1&#39; 的目录并同时删除其内容</li><li><code>rm -rf dir1 dir2</code> 同时删除两个目录及它们的内容</li><li><code>mv dir1 new_dir</code> 重命名/移动 一个目录</li><li><code>cp file1 file2</code> 复制一个文件</li><li><code>cp dir/* .</code> 复制一个目录下的所有文件到当前工作目录</li><li><code>cp -a /tmp/dir1 .</code> 复制一个目录到当前工作目录</li><li><code>cp -a dir1 dir2</code> 复制一个目录</li><li><code>ln -s file1 lnk1</code> 创建一个指向文件或目录的软链接</li><li><code>ln file1 lnk1</code> 创建一个指向文件或目录的物理链接</li><li><code>touch -t 0712250000 file1</code> 修改一个文件或目录的时间戳 - (YYMMDDhhmm)</li><li><code>iconv -l</code> 列出已知的编码</li></ul><h2 id="_4、文件搜索" tabindex="-1">4、文件搜索 <a class="header-anchor" href="#_4、文件搜索" aria-label="Permalink to &quot;4、文件搜索&quot;">​</a></h2><ul><li><code>find / -name file1</code> 从 &#39;/&#39; 开始进入根文件系统搜索文件和目录</li><li><code>find / -user user1</code> 搜索属于用户 &#39;user1&#39; 的文件和目录</li><li><code>find /home/user1 -name \\*.bin</code> 在目录 &#39;/ home/user1&#39; 中搜索带有&#39;.bin&#39; 结尾的文件</li><li><code>find /usr/bin -type f -atime +100</code> 搜索在过去100天内未被使用过的执行文件</li><li><code>find /usr/bin -type f -mtime -10</code> 搜索在10天内被创建或者修改过的文件</li><li><code>find / -name \\*.rpm -exec chmod 755 &#39;{}&#39; \\;</code> 搜索以 &#39;.rpm&#39; 结尾的文件并定义其权限</li><li><code>find / -xdev -name \\*.rpm</code> 搜索以 &#39;.rpm&#39; 结尾的文件，忽略光驱、捷盘等可移动设备</li><li><code>locate \\*.ps</code> 寻找以 &#39;.ps&#39; 结尾的文件 - 先运行 &#39;updatedb&#39; 命令</li><li><code>whereis halt</code> 显示一个二进制文件、源码或man的位置</li><li><code>which halt</code> 显示一个二进制文件或可执行文件的完整路径</li></ul><h2 id="_5、挂载一个文件系统" tabindex="-1">5、挂载一个文件系统 <a class="header-anchor" href="#_5、挂载一个文件系统" aria-label="Permalink to &quot;5、挂载一个文件系统&quot;">​</a></h2><ul><li><code>mount /dev/hda2 /mnt/hda2</code> 挂载一个叫做hda2的盘 - 确定目录 &#39;/ mnt/hda2&#39; 已经存在</li><li><code>umount /dev/hda2</code> 卸载一个叫做hda2的盘 - 先从挂载点 &#39;/ mnt/hda2&#39; 退出</li><li><code>fuser -km /mnt/hda2</code> 当设备繁忙时强制卸载</li><li><code>umount -n /mnt/hda2</code> 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用</li><li><code>mount /dev/fd0 /mnt/floppy</code> 挂载一个软盘</li><li><code>mount /dev/cdrom /mnt/cdrom</code> 挂载一个cdrom或dvdrom</li><li><code>mount /dev/hdc /mnt/cdrecorder</code> 挂载一个cdrw或dvdrom</li><li><code>mount /dev/hdb /mnt/cdrecorder</code> 挂载一个cdrw或dvdrom</li><li><code>mount -o loop file.iso /mnt/cdrom</code> 挂载一个文件或ISO镜像文件</li><li><code>mount -t vfat /dev/hda5 /mnt/hda5</code> 挂载一个Windows FAT32文件系统</li><li><code>mount /dev/sda1 /mnt/usbdisk</code> 挂载一个usb 捷盘或闪存设备</li><li><code>mount -t smbfs -o username=user,password=pass//WinClient/share /mnt/share</code> 挂载一个windows网络共享</li></ul><h2 id="_6、磁盘空间" tabindex="-1">6、磁盘空间 <a class="header-anchor" href="#_6、磁盘空间" aria-label="Permalink to &quot;6、磁盘空间&quot;">​</a></h2><ul><li><code>df -h</code> 显示已经挂载的分区列表</li><li><code>ls -lSr |more</code> 以尺寸大小排列文件和目录</li><li><code>du -sh dir1</code> 估算目录 &#39;dir1&#39; 已经使用的磁盘空间&#39;</li><li><code>du -sk * | sort -rn</code> 以容量大小为依据依次显示文件和目录的大小</li><li><code>rpm -q -a --qf &#39;%10{SIZE}t%{NAME}n&#39; | sort -k1,1n</code> 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)</li><li><code>dpkg-query -W -f=&#39;${Installed-Size;10}t${Package}n&#39; | sort -k1,1n</code> 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)</li></ul><h2 id="_7、用户和群组" tabindex="-1">7、用户和群组 <a class="header-anchor" href="#_7、用户和群组" aria-label="Permalink to &quot;7、用户和群组&quot;">​</a></h2><ul><li><code>groupadd group_name</code> 创建一个新用户组</li><li><code>groupdel group_name</code> 删除一个用户组</li><li><code>groupmod -n new_group_name old_group_name</code> 重命名一个用户组</li><li><code>useradd -c &quot;Name Surname &quot; -g admin -d /home/user1 -s /bin/bash user1</code> 创建一个属于 &quot;admin&quot; 用户组的用户</li><li><code>useradd user1</code> 创建一个新用户</li><li><code>userdel -r user1</code> 删除一个用户 ( &#39;-r&#39; 排除主目录)</li><li><code>usermod -c &quot;User FTP&quot; -g system -d /ftp/user1 -s /bin/nologin user1</code> 修改用户属性</li><li><code>passwd</code> 修改口令</li><li><code>passwd user1</code> 修改一个用户的口令 (只允许root执行)</li><li><code>chage -E 2005-12-31 user1</code> 设置用户口令的失效期限</li><li><code>pwck</code> 检查 &#39;/etc/passwd&#39; 的文件格式和语法修正以及存在的用户</li><li><code>grpck</code> 检查 &#39;/etc/passwd&#39; 的文件格式和语法修正以及存在的群组</li><li><code>newgrp group_name</code> 登陆进一个新的群组以改变新创建文件的预设群组</li></ul><h2 id="_8、文件的权限" tabindex="-1">8、文件的权限 <a class="header-anchor" href="#_8、文件的权限" aria-label="Permalink to &quot;8、文件的权限&quot;">​</a></h2><ul><li><code>ls -lh</code> 显示权限</li><li><code>ls /tmp | pr -T5 -W$COLUMNS</code> 将终端划分成5栏显示</li><li><code>chmod ugo+rwx directory1</code> 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限</li><li><code>chmod go-rwx directory1</code> 删除群组(g)与其他人(o)对目录的读写执行权限</li><li><code>chown user1 file1</code> 改变一个文件的所有人属性</li><li><code>chown -R user1 directory1</code> 改变一个目录的所有人属性并同时改变改目录下所有文件的属性</li><li><code>chgrp group1 file1</code> 改变文件的群组</li><li><code>chown user1:group1 file1</code> 改变一个文件的所有人和群组属性</li><li><code>find / -perm -u+s</code> 罗列一个系统中所有使用了SUID控制的文件</li><li><code>chmod u+s /bin/file1</code> 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限</li><li><code>chmod u-s /bin/file1</code> 禁用一个二进制文件的 SUID位</li><li><code>chmod g+s /home/public</code> 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的</li><li><code>chmod g-s /home/public</code> 禁用一个目录的 SGID 位</li><li><code>chmod o+t /home/public</code> 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件</li><li><code>chmod o-t /home/public</code> 禁用一个目录的 STIKY 位</li><li><code>chmod +x</code> 文件路径 为所有者、所属组和其他用户添加执行的权限</li><li><code>chmod -x</code> 文件路径 为所有者、所属组和其他用户删除执行的权限</li><li><code>chmod u+x</code> 文件路径 为所有者添加执行的权限</li><li><code>chmod g+x</code> 文件路径 为所属组添加执行的权限</li><li><code>chmod o+x</code> 文件路径 为其他用户添加执行的权限</li><li><code>chmod ug+x</code> 文件路径 为所有者、所属组添加执行的权限</li><li><code>chmod =wx</code> 文件路径 为所有者、所属组和其他用户添加写、执行的权限，取消读权限</li><li><code>chmod ug=wx</code> 文件路径 为所有者、所属组添加写、执行的权限，取消读权限</li></ul><h2 id="_9、文件的特殊属性" tabindex="-1">9、文件的特殊属性 <a class="header-anchor" href="#_9、文件的特殊属性" aria-label="Permalink to &quot;9、文件的特殊属性&quot;">​</a></h2><p>使用 “+” 设置权限，使用 “-” 用于取消</p><ul><li><code>chattr +a file1</code> 只允许以追加方式读写文件</li><li><code>chattr +c file1</code> 允许这个文件能被内核自动压缩/解压</li><li><code>chattr +d file1</code> 在进行文件系统备份时，dump程序将忽略这个文件</li><li><code>chattr +i file1</code> 设置成不可变的文件，不能被删除、修改、重命名或者链接</li><li><code>chattr +s file1</code> 允许一个文件被安全地删除</li><li><code>chattr +S file1</code> 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘</li><li><code>chattr +u file1</code> 若文件被删除，系统会允许你在以后恢复这个被删除的文件</li><li><code>lsattr</code> 显示特殊的属性</li></ul><h2 id="_10、打包和压缩文件" tabindex="-1">10、打包和压缩文件 <a class="header-anchor" href="#_10、打包和压缩文件" aria-label="Permalink to &quot;10、打包和压缩文件&quot;">​</a></h2><ul><li><code>bunzip2 file1.bz2</code> 解压一个叫做 &#39;file1.bz2&#39;的文件</li><li><code>bzip2 file1</code> 压缩一个叫做 &#39;file1&#39; 的文件</li><li><code>gunzip file1.gz</code> 解压一个叫做 &#39;file1.gz&#39;的文件</li><li><code>gzip file1</code> 压缩一个叫做 &#39;file1&#39;的文件</li><li><code>gzip -9 file1</code> 最大程度压缩</li><li><code>rar a file1.rar test_file</code> 创建一个叫做 &#39;file1.rar&#39; 的包</li><li><code>rar a file1.rar file1 file2 dir1</code> 同时压缩 &#39;file1&#39;, &#39;file2&#39; 以及目录 &#39;dir1&#39;</li><li><code>rar x file1.rar</code> 解压rar包</li><li><code>unrar x file1.rar</code> 解压rar包</li><li><code>tar -cvf archive.tar file1</code> 创建一个非压缩的 tarball</li><li><code>tar -cvf archive.tar file1 file2 dir1</code> 创建一个包含了 &#39;file1&#39;, &#39;file2&#39; 以及 &#39;dir1&#39;的档案文件</li><li><code>tar -tf archive.tar</code> 显示一个包中的内容</li><li><code>tar -xvf archive.tar</code> 释放一个包</li><li><code>tar -xvf archive.tar -C /tmp</code> 将压缩包释放到 /tmp目录下</li><li><code>tar -cvfj archive.tar.bz2 dir1</code> 创建一个bzip2格式的压缩包</li><li><code>tar -xvfj archive.tar.bz2</code> 解压一个bzip2格式的压缩包</li><li><code>tar -cvfz archive.tar.gz dir1</code> 创建一个gzip格式的压缩包</li><li><code>tar -xvfz archive.tar.gz</code> 解压一个gzip格式的压缩包</li><li><code>zip file1.zip file1</code> 创建一个zip格式的压缩包</li><li><code>zip -r file1.zip file1 file2 dir1</code> 将几个文件和目录同时压缩成一个zip格式的压缩包</li><li><code>unzip file1.zip</code> 解压一个zip格式压缩包</li></ul><h2 id="_11、rpm-包" tabindex="-1">11、RPM 包 <a class="header-anchor" href="#_11、rpm-包" aria-label="Permalink to &quot;11、RPM 包&quot;">​</a></h2><blockquote><p>Fedora, Redhat及类似系统</p></blockquote><ul><li><code>rpm -ivh package.rpm</code> 安装一个rpm包</li><li><code>rpm -ivh --nodeeps package.rpm</code> 安装一个rpm包而忽略依赖关系警告</li><li><code>rpm -U package.rpm</code> 更新一个rpm包但不改变其配置文件</li><li><code>rpm -F package.rpm</code> 更新一个确定已经安装的rpm包</li><li><code>rpm -e package_name.rpm</code> 删除一个rpm包</li><li><code>rpm -qa</code> 显示系统中所有已经安装的rpm包</li><li><code>rpm -qa | grep httpd</code> 显示所有名称中包含 &quot;httpd&quot; 字样的rpm包</li><li><code>rpm -qi package_name</code> 获取一个已安装包的特殊信息</li><li><code>rpm -qg &quot;System Environment/Daemons&quot;</code> 显示一个组件的rpm包</li><li><code>rpm -ql package_name</code> 显示一个已经安装的rpm包提供的文件列表</li><li><code>rpm -qc package_name</code> 显示一个已经安装的rpm包提供的配置文件列表</li><li><code>rpm -q package_name --whatrequires</code> 显示与一个rpm包存在依赖关系的列表</li><li><code>rpm -q package_name --whatprovides</code> 显示一个rpm包所占的体积</li><li><code>rpm -q package_name --scripts</code> 显示在安装/删除期间所执行的脚本</li><li><code>rpm -q package_name --changelog</code> 显示一个rpm包的修改历史</li><li><code>rpm -qf /etc/httpd/conf/httpd.conf</code> 确认所给的文件由哪个rpm包所提供</li><li><code>rpm -qp package.rpm -l</code> 显示由一个尚未安装的rpm包提供的文件列表</li><li><code>rpm --import /media/cdrom/RPM-GPG-KEY</code> 导入公钥数字证书</li><li><code>rpm --checksig package.rpm</code> 确认一个rpm包的完整性</li><li><code>rpm -qa gpg-pubkey</code> 确认已安装的所有rpm包的完整性</li><li><code>rpm -V package_name</code> 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间</li><li><code>rpm -Va</code> 检查系统中所有已安装的rpm包- 小心使用</li><li><code>rpm -Vp package.rpm</code> 确认一个rpm包还未安装</li><li><code>rpm2cpio package.rpm | cpio --extract --make-directories *bin*</code> 从一个rpm包运行可执行文件</li><li><code>rpm -ivh /usr/src/redhat/RPMS/arch/package.rpm</code> 从一个rpm源码安装一个构建好的包</li><li><code>rpmbuild --rebuild package_name.src.rpm</code> 从一个rpm源码构建一个 rpm 包</li></ul><h2 id="_12、yum-软件包升级器" tabindex="-1">12、YUM 软件包升级器 <a class="header-anchor" href="#_12、yum-软件包升级器" aria-label="Permalink to &quot;12、YUM 软件包升级器&quot;">​</a></h2><blockquote><p>Fedora, RedHat及类似系统</p></blockquote><ul><li><code>yum install package_name</code> 下载并安装一个rpm包</li><li><code>yum localinstall package_name.rpm</code> 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系</li><li><code>yum update package_name.rpm</code> 更新当前系统中所有安装的rpm包</li><li><code>yum update package_name</code> 更新一个rpm包</li><li><code>yum remove package_name</code> 删除一个rpm包</li><li><code>yum list</code> 列出当前系统中安装的所有包</li><li><code>yum search package_name</code> 在rpm仓库中搜寻软件包</li><li><code>yum clean packages</code> 清理rpm缓存删除下载的包</li><li><code>yum clean headers</code> 删除所有头文件</li><li><code>yum clean all</code> 删除所有缓存的包和头文件</li></ul><h2 id="_13、deb-包" tabindex="-1">13、DEB 包 <a class="header-anchor" href="#_13、deb-包" aria-label="Permalink to &quot;13、DEB 包&quot;">​</a></h2><blockquote><p>Debian, Ubuntu 以及类似系统</p></blockquote><ul><li><code>dpkg -i package.deb</code> 安装/更新一个 deb 包</li><li><code>dpkg -r package_name</code> 从系统删除一个 deb 包</li><li><code>dpkg -l</code> 显示系统中所有已经安装的 deb 包</li><li><code>dpkg -l | grep httpd</code> 显示所有名称中包含 &quot;httpd&quot; 字样的deb包</li><li><code>dpkg -s package_name</code> 获得已经安装在系统中一个特殊包的信息</li><li><code>dpkg -L package_name</code> 显示系统中已经安装的一个deb包所提供的文件列表</li><li><code>dpkg --contents package.deb</code> 显示尚未安装的一个包所提供的文件列表</li><li><code>dpkg -S /bin/ping</code> 确认所给的文件由哪个deb包提供</li><li><code>apt-get install package_name</code> 安装/更新一个 deb 包</li><li><code>apt-cdrom install package_name</code> 从光盘安装/更新一个 deb 包</li><li><code>apt-get update</code> 升级列表中的软件包</li><li><code>apt-get upgrade</code> 升级所有已安装的软件</li><li><code>apt-get remove package_name</code> 从系统删除一个deb包</li><li><code>apt-get check</code> 确认依赖的软件仓库正确</li><li><code>apt-get clean</code> 从下载的软件包中清理缓存</li><li><code>apt-cache search searched-package</code> 返回包含所要搜索字符串的软件包名称</li></ul><h2 id="_14、查看文件内容" tabindex="-1">14、查看文件内容 <a class="header-anchor" href="#_14、查看文件内容" aria-label="Permalink to &quot;14、查看文件内容&quot;">​</a></h2><ul><li><code>cat file1</code> 从第一个字节开始正向查看文件的内容</li><li><code>tac file1</code> 从最后一行开始反向查看一个文件的内容</li><li><code>more file1</code> 查看一个长文件的内容</li><li><code>less file1</code> 类似于 &#39;more&#39; 命令，但是它允许在文件中和正向操作一样的反向操作</li><li><code>head -2 file1</code> 查看一个文件的前两行</li><li><code>tail -2 file1</code> 查看一个文件的最后两行</li><li><code>tail -f /var/log/messages</code> 实时查看被添加到一个文件中的内容</li></ul><h2 id="_15、文本处理" tabindex="-1">15、文本处理 <a class="header-anchor" href="#_15、文本处理" aria-label="Permalink to &quot;15、文本处理&quot;">​</a></h2><ul><li><code>cat file1 | command( sed, grep, awk, grep, etc...) &gt; result.txt</code> 合并一个文件的详细说明文本，并将简介写入一个新文件中</li><li><code>cat file1 | command( sed, grep, awk, grep, etc...) &gt;&gt; result.txt</code> 合并一个文件的详细说明文本，并将简介写入一个已有的文件中</li><li><code>grep Aug /var/log/messages</code> 在文件 &#39;/var/log/messages&#39;中查找关键词&quot;Aug&quot;</li><li><code>grep ^Aug /var/log/messages</code> 在文件 &#39;/var/log/messages&#39;中查找以&quot;Aug&quot;开始的词汇</li><li><code>grep [0-9] /var/log/messages</code> 选择 &#39;/var/log/messages&#39; 文件中所有包含数字的行</li><li><code>grep Aug -R /var/log/*</code> 在目录 &#39;/var/log&#39; 及随后的目录中搜索字符串&quot;Aug&quot;</li><li><code>sed &#39;s/stringa1/stringa2/g&#39; example.txt</code> 将example.txt文件中的 &quot;string1&quot; 替换成 &quot;string2&quot;</li><li><code>sed &#39;/^$/d&#39; example.txt</code> 从example.txt文件中删除所有空白行</li><li><code>sed &#39;/ *#/d; /^$/d&#39; example.txt</code> 从example.txt文件中删除所有注释和空白行</li><li><code>echo &#39;esempio&#39; | tr &#39;[:lower:]&#39; &#39;[:upper:]&#39;</code> 合并上下单元格内容</li><li><code>sed -e &#39;1d&#39; result.txt</code> 从文件example.txt 中排除第一行</li><li><code>sed -n &#39;/stringa1/p&#39;</code> 查看只包含词汇 &quot;string1&quot;的行</li><li><code>sed -e &#39;s/ *$//&#39; example.txt</code> 删除每一行最后的空白字符</li><li><code>sed -e &#39;s/stringa1//g&#39; example.txt</code> 从文档中只删除词汇 &quot;string1&quot; 并保留剩余全部</li><li><code>sed -n &#39;1,5p;5q&#39; example.txt</code> 查看从第一行到第5行内容</li><li><code>sed -n &#39;5p;5q&#39; example.txt</code> 查看第5行</li><li><code>sed -e &#39;s/00*/0/g&#39; example.txt</code> 用单个零替换多个零</li><li><code>cat -n file1</code> 标示文件的行数</li><li><code>cat example.txt | awk &#39;NR%2==1&#39;</code> 删除example.txt文件中的所有偶数行</li><li><code>echo a b c | awk &#39;{print $1}&#39;</code> 查看一行第一栏</li><li><code>echo a b c | awk &#39;{print $1,$3}&#39;</code> 查看一行的第一和第三栏</li><li><code>paste file1 file2</code> 合并两个文件或两栏的内容</li><li><code>paste -d &#39;+&#39; file1 file2</code> 合并两个文件或两栏的内容，中间用&quot;+&quot;区分</li><li><code>sort file1 file2</code> 排序两个文件的内容</li><li><code>sort file1 file2 | uniq</code> 取出两个文件的并集(重复的行只保留一份)</li><li><code>sort file1 file2 | uniq -u</code> 删除交集，留下其他的行</li><li><code>sort file1 file2 | uniq -d</code> 取出两个文件的交集(只留下同时存在于两个文件中的文件)</li><li><code>comm -1 file1 file2</code> 比较两个文件的内容只删除 &#39;file1&#39; 所包含的内容</li><li><code>comm -2 file1 file2</code> 比较两个文件的内容只删除 &#39;file2&#39; 所包含的内容</li><li><code>comm -3 file1 file2</code> 比较两个文件的内容只删除两个文件共有的部分</li></ul><h2 id="_16、字符设置和文件格式转换" tabindex="-1">16、字符设置和文件格式转换 <a class="header-anchor" href="#_16、字符设置和文件格式转换" aria-label="Permalink to &quot;16、字符设置和文件格式转换&quot;">​</a></h2><ul><li><code>dos2unix filedos.txt fileunix.txt</code> 将一个文本文件的格式从MSDOS转换成UNIX -<code> unix2dos fileunix.txt filedos.txt</code> 将一个文本文件的格式从UNIX转换成MSDOS</li><li><code>recode ..HTML &lt; page.txt &gt; page.html</code> 将一个文本文件转换成html</li><li><code>recode -l | more</code> 显示所有允许的转换格式</li></ul><h2 id="_17、文件系统分析" tabindex="-1">17、文件系统分析 <a class="header-anchor" href="#_17、文件系统分析" aria-label="Permalink to &quot;17、文件系统分析&quot;">​</a></h2><ul><li><code>badblocks -v /dev/hda1</code> 检查磁盘hda1上的坏磁块</li><li><code>fsck /dev/hda1</code> 修复/检查hda1磁盘上linux文件系统的完整性</li><li><code>fsck.ext2 /dev/hda1</code> 修复/检查hda1磁盘上ext2文件系统的完整性</li><li><code>e2fsck /dev/hda1</code> 修复/检查hda1磁盘上ext2文件系统的完整性</li><li><code>e2fsck -j /dev/hda1</code> 修复/检查hda1磁盘上ext3文件系统的完整性</li><li><code>fsck.ext3 /dev/hda1</code> 修复/检查hda1磁盘上ext3文件系统的完整性</li><li><code>fsck.vfat /dev/hda1</code> 修复/检查hda1磁盘上fat文件系统的完整性</li><li><code>fsck.msdos /dev/hda1</code> 修复/检查hda1磁盘上dos文件系统的完整性</li><li><code>dosfsck /dev/hda1</code> 修复/检查hda1磁盘上dos文件系统的完整性</li></ul><h2 id="_18、初始化一个文件系统" tabindex="-1">18、初始化一个文件系统 <a class="header-anchor" href="#_18、初始化一个文件系统" aria-label="Permalink to &quot;18、初始化一个文件系统&quot;">​</a></h2><ul><li><code>mkfs /dev/hda1</code> 在hda1分区创建一个文件系统</li><li><code>mke2fs /dev/hda1</code> 在hda1分区创建一个linux ext2的文件系统</li><li><code>mke2fs -j /dev/hda1</code> 在hda1分区创建一个linux ext3(日志型)的文件系统</li><li><code>mkfs -t vfat 32 -F /dev/hda1</code> 创建一个 FAT32 文件系统</li><li><code>fdformat -n /dev/fd0</code> 格式化一个软盘</li><li><code>mkswap /dev/hda3</code> 创建一个swap文件系统</li></ul><h2 id="_19、swap文件系统" tabindex="-1">19、SWAP文件系统 <a class="header-anchor" href="#_19、swap文件系统" aria-label="Permalink to &quot;19、SWAP文件系统&quot;">​</a></h2><ul><li><code>mkswap /dev/hda3</code> 创建一个swap文件系统</li><li><code>swapon /dev/hda3</code> 启用一个新的swap文件系统</li><li><code>swapon /dev/hda2</code> /dev/hdb3 启用两个swap分区</li></ul><h2 id="_20、备份" tabindex="-1">20、备份 <a class="header-anchor" href="#_20、备份" aria-label="Permalink to &quot;20、备份&quot;">​</a></h2><ul><li><code>dump -0aj -f /tmp/home0.bak /home</code> 制作一个 &#39;/home&#39; 目录的完整备份</li><li><code>dump -1aj -f /tmp/home0.bak /home</code> 制作一个 &#39;/home&#39; 目录的交互式备份</li><li><code>restore -if /tmp/home0.bak</code> 还原一个交互式备份</li><li><code>rsync -rogpav --delete /home /tmp</code> 同步两边的目录</li><li><code>rsync -rogpav -e ssh --delete /home ip_address:/tmp</code> 通过SSH通道rsync</li><li><code>rsync -az -e ssh --delete ip_addr:/home/public /home/local</code> 通过ssh和压缩将一个远程目录同步到本地目录</li><li><code>rsync -az -e ssh --delete /home/local ip_addr:/home/public</code> 通过ssh和压缩将本地目录同步到远程目录</li><li><code>dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr &#39;dd of=hda.gz&#39;</code> 通过ssh在远程主机上执行一次备份本地磁盘的操作</li><li><code>dd if=/dev/sda of=/tmp/file1</code> 备份磁盘内容到一个文件</li><li><code>tar -Puf backup.tar /home/user</code> 执行一次对 &#39;/home/user&#39; 目录的交互式备份操作</li><li><code>( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr &#39;cd /home/share/ &amp;&amp; tar x -p&#39;</code> 通过ssh在远程目录中复制一个目录内容</li><li><code>( tar c /home ) | ssh -C user@ip_addr &#39;cd /home/backup-home &amp;&amp; tar x -p&#39;</code> 通过ssh在远程目录中复制一个本地目录</li><li><code>tar cf - . | (cd /tmp/backup ; tar xf - )</code> 本地将一个目录复制到另一个地方，保留原有权限及链接</li><li><code>find /home/user1 -name &#39;*.txt&#39; | xargs cp -av --target-directory=/home/backup/ --parents</code> 从一个目录查找并复制所有以 &#39;.txt&#39; 结尾的文件到另一个目录</li><li><code>find /var/log -name &#39;*.log&#39; | tar cv --files-from=- | bzip2 &gt; log.tar.bz2</code> 查找所有以 &#39;.log&#39; 结尾的文件并做成一个bzip包</li><li><code>dd if=/dev/hda of=/dev/fd0 bs=512 count=1</code> 做一个将 MBR (Master Boot Record)内容复制到软盘的动作</li><li><code>dd if=/dev/fd0 of=/dev/hda bs=512 count=1</code> 从已经保存到软盘的备份中恢复MBR内容</li></ul><h2 id="_21、光盘" tabindex="-1">21、光盘 <a class="header-anchor" href="#_21、光盘" aria-label="Permalink to &quot;21、光盘&quot;">​</a></h2><ul><li><code>cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force</code> 清空一个可复写的光盘内容</li><li><code>mkisofs /dev/cdrom &gt; cd.iso</code> 在磁盘上创建一个光盘的iso镜像文件</li><li><code>mkisofs /dev/cdrom | gzip &gt; cd_iso.gz</code> 在磁盘上创建一个压缩了的光盘iso镜像文件</li><li><code>mkisofs -J -allow-leading-dots -R -V &quot;Label CD&quot; -iso-level 4 -o ./cd.iso data_cd</code> 创建一个目录的iso镜像文件</li><li><code>cdrecord -v dev=/dev/cdrom cd.iso</code> 刻录一个ISO镜像文件</li><li><code>gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom</code> - 刻录一个压缩了的ISO镜像文件</li><li><code>mount -o loop cd.iso /mnt/iso</code> 挂载一个ISO镜像文件</li><li><code>cd-paranoia -B</code> 从一个CD光盘转录音轨到 wav 文件中</li><li><code>cd-paranoia -- &quot;-3&quot;</code> 从一个CD光盘转录音轨到 wav 文件中（参数-3）</li><li><code>cdrecord --scanbus</code> 扫描总线以识别scsi通道</li><li><code>dd if=/dev/hdc | md5sum</code> 校验一个设备的md5sum编码，例如一张 CD</li></ul><h2 id="_22、网络" tabindex="-1">22、网络 <a class="header-anchor" href="#_22、网络" aria-label="Permalink to &quot;22、网络&quot;">​</a></h2><blockquote><p>以太网和WIFI无线</p></blockquote><ul><li><code>ifconfig eth0</code> 显示一个以太网卡的配置</li><li><code>ifup eth0</code> 启用一个 &#39;eth0&#39; 网络设备</li><li><code>ifdown eth0</code> 禁用一个 &#39;eth0&#39; 网络设备</li><li><code>ifconfig eth0 192.168.1.1 netmask 255.255.255.0</code> 控制IP地址</li><li><code>ifconfig eth0 promisc</code> 设置 &#39;eth0&#39; 成混杂模式以嗅探数据包 (sniffing)</li><li><code>dhclient eth0</code> 以dhcp模式启用 &#39;eth0&#39;</li></ul><h2 id="_23、列出目录内容" tabindex="-1">23、列出目录内容 <a class="header-anchor" href="#_23、列出目录内容" aria-label="Permalink to &quot;23、列出目录内容&quot;">​</a></h2><ul><li><code>ls -a</code>：显示所有文件（包括隐藏文件）；</li><li><code>ls -l</code>：显示详细信息；</li><li><code>ls -R</code>：递归显示子目录结构；</li><li><code>ls -ld</code>：显示目录和链接信息；</li><li><code>ctrl+r</code>：历史记录中所搜命令（输入命令中的任意一个字符）；</li><li><code>pwd</code>:显示当前目录</li></ul><h2 id="_24、查看文件的类型" tabindex="-1">24、查看文件的类型 <a class="header-anchor" href="#_24、查看文件的类型" aria-label="Permalink to &quot;24、查看文件的类型&quot;">​</a></h2><ul><li><code>file</code>:查看文件的类型</li></ul><h2 id="_25、复制文件目录等操作" tabindex="-1">25、复制文件目录等操作 <a class="header-anchor" href="#_25、复制文件目录等操作" aria-label="Permalink to &quot;25、复制文件目录等操作&quot;">​</a></h2><h3 id="_1、cp-复制文件和目录-cp源文件-文件夹-目标文件-文件夹" tabindex="-1">1、cp：复制文件和目录 cp源文件（文件夹）目标文件（文件夹） <a class="header-anchor" href="#_1、cp-复制文件和目录-cp源文件-文件夹-目标文件-文件夹" aria-label="Permalink to &quot;1、cp：复制文件和目录 cp源文件（文件夹）目标文件（文件夹）&quot;">​</a></h3><p>常用参数：</p><ul><li><code>-r</code>:递归复制整个目录树；</li><li><code>-v</code>：显示详细信息；</li></ul><blockquote><p>复制文件夹时要在cp命令后面加一个-r参数：如：cp -r 源文件夹 目标文件夹</p></blockquote><h3 id="_2、touch-文件名-当文件不存在的时候-创建相应的文件-当文件存在的时候-修改文件的创建时间。" tabindex="-1">2、touch+文件名：当文件不存在的时候，创建相应的文件；当文件存在的时候，修改文件的创建时间。 <a class="header-anchor" href="#_2、touch-文件名-当文件不存在的时候-创建相应的文件-当文件存在的时候-修改文件的创建时间。" aria-label="Permalink to &quot;2、touch+文件名：当文件不存在的时候，创建相应的文件；当文件存在的时候，修改文件的创建时间。&quot;">​</a></h3><blockquote><p>功能：生成一个空文件或修改文件的存取/修改的时间记录值。</p></blockquote><ul><li><code>touch *</code> ：将当前下的文件时间修改为系统的当前时间</li><li><code>touch –d 20040210 test</code>：将test文件的日期改为20040210</li><li><code>touch abc</code> ：若abc文件存在，则修改为系统的当前时间；若不存在，则生成一个为当前时间的空文件</li></ul><h3 id="_3、mv-文件-目标目录-移动或重命名文件或目录-如果指定文件名-则可以重命名文件-。" tabindex="-1">3、mv 文件 目标目录：移动或重命名文件或目录（如果指定文件名，则可以重命名文件）。 <a class="header-anchor" href="#_3、mv-文件-目标目录-移动或重命名文件或目录-如果指定文件名-则可以重命名文件-。" aria-label="Permalink to &quot;3、mv 文件 目标目录：移动或重命名文件或目录（如果指定文件名，则可以重命名文件）。&quot;">​</a></h3><blockquote><p>可以将文件及目录移到另一目录下，或更改文件及目录的名称。格式为：<code>mv [参数]&lt;源文件或目录&gt; &lt;目标文件或目录&gt;</code></p></blockquote><ul><li><code>mv a.txt ../</code>：将a.txt文件移动上层目录</li><li><code>mv a.txt b.txt</code>：将a.txt改名为b.txt</li><li><code>mv dir2 ../</code>：将dir2目录上移一层</li></ul><h3 id="_4、rm-删除文件" tabindex="-1">4、rm：删除文件； <a class="header-anchor" href="#_4、rm-删除文件" aria-label="Permalink to &quot;4、rm：删除文件；&quot;">​</a></h3><p>常用参数：</p><ul><li><code>-i</code>：交互式</li><li><code>-r</code>：递归的删除包括目录中的所有内容</li></ul><h3 id="_5、mkdir-文件夹名称-创建文件夹" tabindex="-1">5、mkdir +文件夹名称：创建文件夹； <a class="header-anchor" href="#_5、mkdir-文件夹名称-创建文件夹" aria-label="Permalink to &quot;5、mkdir +文件夹名称：创建文件夹；&quot;">​</a></h3><ul><li><code>rmdir 文件夹名称</code>：删除文件夹（只能删除空文件夹）</li></ul><h3 id="_6、rm-r-文件夹名称-删除文件夹-空文件夹和非空文件夹都可删除" tabindex="-1">6、rm -r +文件夹名称：删除文件夹（空文件夹和非空文件夹都可删除） <a class="header-anchor" href="#_6、rm-r-文件夹名称-删除文件夹-空文件夹和非空文件夹都可删除" aria-label="Permalink to &quot;6、rm -r +文件夹名称：删除文件夹（空文件夹和非空文件夹都可删除）&quot;">​</a></h3><h3 id="_7、mkdir-p-dir1-dir2-在当前目录下创建dir1目录-并在dir1目录下创建dir2目录-也就是连续创建两个目录-dir1-和dir1-dir2" tabindex="-1">7、mkdir -p dir1/dir2 ：在当前目录下创建dir1目录，并在dir1目录下创建dir2目录， 也就是连续创建两个目录（dir1/和dir1/dir2） <a class="header-anchor" href="#_7、mkdir-p-dir1-dir2-在当前目录下创建dir1目录-并在dir1目录下创建dir2目录-也就是连续创建两个目录-dir1-和dir1-dir2" aria-label="Permalink to &quot;7、mkdir -p dir1/dir2 ：在当前目录下创建dir1目录，并在dir1目录下创建dir2目录， 也就是连续创建两个目录（dir1/和dir1/dir2）&quot;">​</a></h3><h3 id="_8、rmdir-–p-dir1-dir2-删除dir1下的dir2目录-若dir1目录为空也删除它" tabindex="-1">8、rmdir –p dir1/dir2：删除dir1下的dir2目录，若dir1目录为空也删除它 <a class="header-anchor" href="#_8、rmdir-–p-dir1-dir2-删除dir1下的dir2目录-若dir1目录为空也删除它" aria-label="Permalink to &quot;8、rmdir –p dir1/dir2：删除dir1下的dir2目录，若dir1目录为空也删除它&quot;">​</a></h3><h3 id="_9、rm-删除当前目录下的所有文件" tabindex="-1">9、rm * ：删除当前目录下的所有文件 <a class="header-anchor" href="#_9、rm-删除当前目录下的所有文件" aria-label="Permalink to &quot;9、rm * ：删除当前目录下的所有文件&quot;">​</a></h3><ul><li><code>-f参数</code>：强迫删除文件</li><li><code>rm –f *.txt</code>：强迫删除所有以后缀名为txt文件</li><li><code>-i参数</code>：删除文件时询问</li><li><code>rm –i *</code> ：删除当前目录下的所有文件会有如下提示：<code>rm:backup:is a directory</code> 遇到目录会略过</li><li><code>rm: remove ‘myfiles.txt’ ? Y</code>：删除文件时会询问,可按Y或N键表示允许或拒绝删除文件</li><li><code>-r参数</code>：递归删除（连子目录一同删除，这是一个相当常用的参数）</li><li><code>rm -r test</code> ：删除test目录（含test目录下所有文件和子目录）</li><li><code>rm -r *</code>：删除所有文件（含当前目录所有文件、所有子目录和子目录下的文件） 一般在删除目录时r和f一起用，避免麻烦</li><li><code>rm -rf test</code> ：强行删除、不加询问</li></ul><h3 id="_10、grep-功能-在文件中搜索匹配的字符并进行输出" tabindex="-1">10、grep：功能：在文件中搜索匹配的字符并进行输出 <a class="header-anchor" href="#_10、grep-功能-在文件中搜索匹配的字符并进行输出" aria-label="Permalink to &quot;10、grep：功能：在文件中搜索匹配的字符并进行输出&quot;">​</a></h3><p>格式：<code>grep[参数] &lt;要找的字串&gt; &lt;要寻找字 串的源文件&gt;</code></p><ul><li><code>greplinux test.txt</code>：搜索test.txt文件中字符串linux并输出</li></ul><h3 id="_11、ln命令" tabindex="-1">11、ln命令 <a class="header-anchor" href="#_11、ln命令" aria-label="Permalink to &quot;11、ln命令&quot;">​</a></h3><blockquote><p>功能：在文件和目录之间建立链接</p></blockquote><p>格式：<code>ln [参数] &lt;源文件或目录&gt; &lt;目标文件或目录&gt;</code></p><p>链接分“软链接”和“硬链接”</p><h4 id="_1-软链接" tabindex="-1">1.软链接: <a class="header-anchor" href="#_1-软链接" aria-label="Permalink to &quot;1.软链接:&quot;">​</a></h4><ul><li><code>ln–s /usr/share/do doc</code> ：创建一个链接文件doc，并指向目录<code>/usr/share/do</code></li></ul><h4 id="_2-硬链接" tabindex="-1">2.硬链接: <a class="header-anchor" href="#_2-硬链接" aria-label="Permalink to &quot;2.硬链接:&quot;">​</a></h4><ul><li><code>ln /usr/share/test hard</code>：创建一个硬链接文件hard，这时对于test文件对应 的存储区域来说，又多了一个文件指向它</li></ul><h2 id="_26、系统常用命令" tabindex="-1">26、系统常用命令 <a class="header-anchor" href="#_26、系统常用命令" aria-label="Permalink to &quot;26、系统常用命令&quot;">​</a></h2><h3 id="_1、显示命令" tabindex="-1">1、显示命令 <a class="header-anchor" href="#_1、显示命令" aria-label="Permalink to &quot;1、显示命令&quot;">​</a></h3><ul><li><code>date</code>：查看或设置当前系统的时间，格式化显示时间：<code>+%Y--%m--%d</code>；</li><li><code>date -s</code>：设置当前系统的时间</li><li><code>hwclock(clock)</code>：显示硬件时钟时间(需要管理员权限)；</li><li><code>cal</code>：查看日历，格式 <code>cal [参数] 月年</code></li><li><code>cal</code>：显示当月的日历</li><li><code>cal 4 2004</code> ：显示2004年4月的日历</li><li><code>cal -y 2003</code>：显示2003年的日历</li><li><code>uptime</code>：查看系统运行时间</li></ul><h3 id="_2、输出查看命令" tabindex="-1">2、输出查看命令 <a class="header-anchor" href="#_2、输出查看命令" aria-label="Permalink to &quot;2、输出查看命令&quot;">​</a></h3><ul><li><code>echo</code>：显示输入的内容</li><li><code>echo &quot;liuyazhuang&quot; &gt;&gt; liuyazhuang.txt</code>: 显示输入的内容并追加文件</li><li><code>cat</code>：显示文件内容,也可以将数个文件合并成一个文件。格式：格式：<code>cat [参数] &lt;文件名&gt;</code><ul><li><code>cat test.txt</code>：显示test.txt文件内容</li><li><code>cat test.txt | more</code> ：逐页显示test.txt文件中的内容</li><li><code>cat test.txt &gt;&gt; test1.txt</code> ：将test.txt的内容附加到test1.txt文件之后</li><li><code>cat test.txt test2.txt &gt; readme.txt</code> : 将test.txt和test2.txt文件合并成readme.txt 文件</li></ul></li><li><code>head</code>：显示文件的头几行（默认10行） <ul><li><code>-n</code>：指定显示的行数格式：<code>head -n 文件名</code></li></ul></li><li><code>tail</code>：显示文件的末尾几行（默认10行）, 格式：<code>tail [参数] &lt;文件名&gt;</code><ul><li><code>-n</code>：指定显示的行数</li><li><code>-f</code>：追踪显示文件更新 （一般用于查看日志，命令不会退出，而是持续显示新加入的内容）</li><li><code>tail-10 /etc/passwd</code> ：显示/etc/passwd/文件的倒数10行内容</li><li><code>tail+10 /etc/passwd</code> ：显示/etc/passwd/文件从第10行开始到末尾的内容</li></ul></li><li><code>more</code>：用于翻页显示文件内容（只能向下翻页）。more命令是一般用于要显示的内容会超过一个画面长度的情况。为了避免画 面显示时瞬间就闪过去，用户可以使用more命令，让画面在显示满一页时暂停，此时可按空格健继续显示下一个画面，或按Q键停止显示。</li><li><code>ls -al |more</code>：以长格形式显示etc目录下的文件列表，显示满一个画面便暂停，可 按空格键继续显示下一画面，或按Q键跳离</li><li><code>less</code>：翻页显示文件内容（带上下翻页）按下上键分页，按q退出。less命令的用法与more命令类似，也可以用来浏览超过一页的文件。所不同 的是less 命令除了可以按空格键向下显示文件外，还可以利用上下键来卷动文件。当要结束浏览时，只要在less命令的提示符“：”下按Q键即可。</li><li><code>ls -al | less</code>：以长格形式列出/etc目录中所有的内容。用户可按上下键浏览或按Q键跳离</li></ul><h3 id="_3、查看硬件信息" tabindex="-1">3、查看硬件信息 <a class="header-anchor" href="#_3、查看硬件信息" aria-label="Permalink to &quot;3、查看硬件信息&quot;">​</a></h3><ul><li><code>Ispci</code>：查看PCI设备 -v：查看详细信息</li><li><code>Isusb</code>：查看USB设备 -v：查看详细信息</li><li><code>Ismod</code>：查看加载的模块(驱动)</li></ul><h3 id="_4、归档、压缩" tabindex="-1">4、归档、压缩 <a class="header-anchor" href="#_4、归档、压缩" aria-label="Permalink to &quot;4、归档、压缩&quot;">​</a></h3><ul><li><code>zip</code>：压缩文件 <code>zip liuyazhuang.zip myfile</code> 格式为：<code>zip 压缩后的zip文件 文件名</code></li><li><code>unzip</code>：解压文件 <code>unzip liuyazhuang.zip</code></li><li><code>gzip</code>：压缩文件 gzip 文件名</li><li><code>tar</code>：归档文件 <ul><li><code>tar -cvf out.tar liuyazhuang</code> 打包一个归档（将文件&quot;liuyazhuang&quot;打包成一个归档）</li><li><code>tar -xvf liuyazhuang.tar</code> 释放一个归档（释放liuyazhuang.tar归档）</li><li>参数:</li><li><code>-z</code>：参数将归档后的归档文件进行gzip压缩以减少大小。</li><li><code>-c</code>：创建一个新tar文件</li><li><code>-v</code>：显示运行过程的信息</li><li><code>-f</code>：指定文件名</li><li><code>-z</code>：调用gzip压缩命令进行压缩</li><li><code>-t</code>：查看压缩文件的内容</li><li><code>-x</code>：解开tar文件</li></ul></li><li><code>tar -cvf test.tar *</code>：将所有文件打包成test.tar，扩展名.tar需自行加上</li><li><code>tar -zcvf test.tar.gz *</code>：将所有文件打包成test.tar，再用gzip命令压缩</li><li><code>tar -tf test.tar</code> ：查看test.tar文件中包括了哪些文件</li><li><code>tar -xvf test.tar</code> 将test.tar解开</li><li><code>tar -zxvf foo.tar.gz</code> 解压缩</li><li>gzip和gunzip命令:</li><li><code>gzip test.txt</code> ：压缩文件时，不需要任何参数</li><li><code>gizp –l test.txt.gz</code>：显示压缩率</li></ul><h3 id="_5、查找" tabindex="-1">5、查找 <a class="header-anchor" href="#_5、查找" aria-label="Permalink to &quot;5、查找&quot;">​</a></h3><ul><li><code>locate</code>：快速查找文件、文件夹。此命令需要预先建立数据库，数据库默认每天更新一次，可用updatedb命令手工建立、更新数据库。</li><li><code>find</code>: 功能：用来寻找文件或目录。 查找位置查找参数。 <ul><li>格式：<code>find [&lt;路径&gt;] [匹配条件]</code></li><li><code>find / -name httpd.conf</code> 搜索系统根目录下名为httpd.conf的文件</li><li><code>find . -name *liuyazhuang*</code> 查找当前目录下名称中含有&quot;liuyazhuang&quot;的文件</li><li><code>find / -name *.conf</code> 查找根目录下（整个硬盘）下后缀为.conf的文件</li><li><code>find / -perm 777</code> 查找所有权限是777的文件</li><li><code>find / -type d</code> 返回根目录下所有的目录</li></ul></li><li></li></ul><h3 id="_6、ctrl-c-终止当前的命令" tabindex="-1">6、ctrl+c :终止当前的命令 <a class="header-anchor" href="#_6、ctrl-c-终止当前的命令" aria-label="Permalink to &quot;6、ctrl+c :终止当前的命令&quot;">​</a></h3><h3 id="_7、who或w命令" tabindex="-1">7、who或w命令 <a class="header-anchor" href="#_7、who或w命令" aria-label="Permalink to &quot;7、who或w命令&quot;">​</a></h3><blockquote><p>功能：查看当前系统中有哪些用户登录</p></blockquote><p>格式：<code>who/w [参数]</code></p><h3 id="_8、dmesg命令-功能-显示系统诊断信息、操作系统版本号、物理内存的大小以及其它信息" tabindex="-1">8、dmesg命令 功能：显示系统诊断信息、操作系统版本号、物理内存的大小以及其它信息 <a class="header-anchor" href="#_8、dmesg命令-功能-显示系统诊断信息、操作系统版本号、物理内存的大小以及其它信息" aria-label="Permalink to &quot;8、dmesg命令 功能：显示系统诊断信息、操作系统版本号、物理内存的大小以及其它信息&quot;">​</a></h3><h3 id="_9、df命令-功能-用于查看文件系统的各个分区的占用情况" tabindex="-1">9、df命令 功能：用于查看文件系统的各个分区的占用情况 <a class="header-anchor" href="#_9、df命令-功能-用于查看文件系统的各个分区的占用情况" aria-label="Permalink to &quot;9、df命令 功能：用于查看文件系统的各个分区的占用情况&quot;">​</a></h3><h3 id="_10、du命令" tabindex="-1">10、du命令 <a class="header-anchor" href="#_10、du命令" aria-label="Permalink to &quot;10、du命令&quot;">​</a></h3><blockquote><p>功能：查看某个目录中各级子目录所使用的硬盘空间数</p></blockquote><p>格式：<code>du [参数] &lt;目录名&gt;</code></p><h3 id="_11、free命令" tabindex="-1">11、free命令 <a class="header-anchor" href="#_11、free命令" aria-label="Permalink to &quot;11、free命令&quot;">​</a></h3><blockquote><p>功能：用于查看系统内存，虚拟内存（交换空间）的大小占用情况</p></blockquote><h2 id="_27、vim" tabindex="-1">27、VIM <a class="header-anchor" href="#_27、vim" aria-label="Permalink to &quot;27、VIM&quot;">​</a></h2><p>VIM 是一款功能强大的命令行文本编辑器，在 Linux 中通过 vim 命令可以启动 vim编辑器。 一般使用 vim + 目标文件路径的形式使用vim。 如果目标文件存在，则 vim 打开目标文件，如果目标文件不存在，则 vim 新建并打开该文件。</p><ul><li><code>q</code>：退出vim编辑器</li></ul><h3 id="vim模式" tabindex="-1">VIM模式 <a class="header-anchor" href="#vim模式" aria-label="Permalink to &quot;VIM模式&quot;">​</a></h3><p>vim拥有三种模式：</p><h4 id="_1-命令模式-常规模式" tabindex="-1">1）命令模式（常规模式） <a class="header-anchor" href="#_1-命令模式-常规模式" aria-label="Permalink to &quot;1）命令模式（常规模式）&quot;">​</a></h4><p>vim启动后，默认进入命令模式，任何模式都可以通过esc键回到命令模式（可以多按几次），命令模式下可以键入不同的命令完成选择、复制、粘贴、撤销等操作。</p><p>命名模式常用命令如下：</p><ul><li><code>i</code>：在光标前插入文本；</li><li><code>o</code>：在当前行的下面插入新行；</li><li><code>dd</code>：删除整行；</li><li><code>yy</code>：将当前行的内容放入缓冲区（复制当前行）</li><li><code>n+yy</code>：将n行的内容放入缓冲区（复制n行）</li><li><code>p</code>：将缓冲区中的文本放入光标后（粘贴）</li><li><code>u</code>：撤销上一个操作</li><li><code>r</code>：替换当前字符/：查找关键字</li></ul><h4 id="_2-插入模式" tabindex="-1">2）插入模式 <a class="header-anchor" href="#_2-插入模式" aria-label="Permalink to &quot;2）插入模式&quot;">​</a></h4><p>在命令模式下按 “ i “键，即可进入插入模式，在插入模式可以输入编辑文本内容，使用esc键可以返回命令模式。</p><h4 id="_3-ex模式" tabindex="-1">3）ex模式 <a class="header-anchor" href="#_3-ex模式" aria-label="Permalink to &quot;3）ex模式&quot;">​</a></h4><p>在命令模式中按” : “键可以进入ex模式，光标会移动到底部，在这里可以保存修改或退出vim。</p><p>ex模式常用命令如下：</p><ul><li><code>:w</code> 保存当前的修改</li><li><code>:q</code> 退出</li><li><code>:wq!</code> 强制退出，保存修改</li><li><code>:x</code> 保存并退出，相当于<code>:wq</code></li><li><code>:set number</code> 显示行号</li><li><code>:!</code> 系统命令 执行一个系统命令并显示结果</li><li><code>:sh</code> 切换到命令行，使用ctrl+d切换回vim</li></ul><h2 id="_28、软件包管理命令-rpm" tabindex="-1">28、软件包管理命令(RPM) <a class="header-anchor" href="#_28、软件包管理命令-rpm" aria-label="Permalink to &quot;28、软件包管理命令(RPM)&quot;">​</a></h2><h3 id="_1、软件包的安装" tabindex="-1">1、软件包的安装 <a class="header-anchor" href="#_1、软件包的安装" aria-label="Permalink to &quot;1、软件包的安装&quot;">​</a></h3><p>使用RPM命令的安装模式可以将软件包内所有的组件放到系统中的正确路径，安装软件包的命令是：<code>rpm –ivh wu-ftpd-2.6.2-8.i386.rpm</code></p><ul><li><code>i</code>：作用rpm的安装模式，</li><li><code>v</code>: 校验文件信息，</li><li><code>h</code>: 以＃号显示安装进度。</li></ul><h3 id="_2、软件包的删除" tabindex="-1">2、软件包的删除 <a class="header-anchor" href="#_2、软件包的删除" aria-label="Permalink to &quot;2、软件包的删除&quot;">​</a></h3><p>删除模式会将指定软件包的内容全部删除，但并不包括已更改过的配置文件，删除RPM软件包的命令如下：<code>rpm -e wu-ftpd</code></p><blockquote><p>注意：这里必须使用软件名“wu-ftpd”或wu-ftpd-2.6.2-8而不是使用当初安装时的软件包名.wu-ftpd-2.6.2-8.i386.rpm</p></blockquote><h3 id="_3、软件包升级" tabindex="-1">3、软件包升级 <a class="header-anchor" href="#_3、软件包升级" aria-label="Permalink to &quot;3、软件包升级&quot;">​</a></h3><p>升级模式会安装用户所指定的更新版本，并删除已安装在系统中的相同软件包，升级软件包命令如下：<code>rpm -Uvh wu-ftpd-2.6.2-8.i386.rpm</code></p><h3 id="_4、软件包更新" tabindex="-1">4、软件包更新 <a class="header-anchor" href="#_4、软件包更新" aria-label="Permalink to &quot;4、软件包更新&quot;">​</a></h3><p>更新模式下，rpm命令会检查在命令行中所指定的软件包是否比系统中原有的软件包更新。</p><p>如果情况属实，rpm命令会自动更新指定的软件包；反之，若系统中并没有指定软件包的较旧版本，rpm命令并不会安装此软件包。而在升级模式下，不管系统中是否有较旧的版本，rpm命令都会安装指定的软件包。</p><ul><li><code>rpm –Fvhwu-ftpd-2.6.2-8.i386.rpm</code></li></ul><h3 id="_5、软件包查询" tabindex="-1">5、软件包查询 <a class="header-anchor" href="#_5、软件包查询" aria-label="Permalink to &quot;5、软件包查询&quot;">​</a></h3><p>若要获取RPM软件包的相关信息，可以使用查询模式。</p><ul><li><code>rpm –q wu-ftpd</code> 查询一个已安装的软件包的内容</li><li><code>rpm –ql package-name</code> 查询软件包所安装的位置</li><li><code>rpm –ql xv</code> (l参数：显示文件列表)</li></ul><h1 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h1><p><a href="https://mp.weixin.qq.com/s/-1yOSpA2vLFLHSTZVvDwPQ" target="_blank" rel="noreferrer">记住这 600条 Linux 命令，直接起飞！</a></p>',141),a=[c];function r(t,h,u,s,m,p){return i(),d("div",null,a)}const b=e(l,[["render",r]]);export{f as __pageData,b as default};
