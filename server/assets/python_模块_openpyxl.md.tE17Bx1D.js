import{_ as t,c as a,o as e,a3 as s}from"./chunks/framework.CFZOmcOm.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"python/模块/openpyxl.md","filePath":"python/模块/openpyxl.md","lastUpdated":1722327281000}'),n={name:"python/模块/openpyxl.md"},p=s(`<h2 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h2><p>主要针对 xlsx 进行读取和编辑</p><h2 id="安装和卸载" tabindex="-1">安装和卸载 <a class="header-anchor" href="#安装和卸载" aria-label="Permalink to &quot;安装和卸载&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 安装</span></span>
<span class="line"><span>pip install openpyxl</span></span>
<span class="line"><span># 或安装</span></span>
<span class="line"><span>python -m pip install openpyxl -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 卸载</span></span>
<span class="line"><span>pip uninstall openpyxl</span></span></code></pre></div><h2 id="引入-模块-openpyxl" tabindex="-1">引入 模块 openpyxl <a class="header-anchor" href="#引入-模块-openpyxl" aria-label="Permalink to &quot;引入 模块 openpyxl&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import openpyxl as vb</span></span></code></pre></div><h2 id="常用操作" tabindex="-1">常用操作 <a class="header-anchor" href="#常用操作" aria-label="Permalink to &quot;常用操作&quot;">​</a></h2><blockquote><p>注意：如果Excel文件正在打开，则 以下所有操作都会报错，错误信息 包含但不限于 <code>无操作权限</code></p></blockquote><h3 id="工作簿" tabindex="-1">工作簿 <a class="header-anchor" href="#工作簿" aria-label="Permalink to &quot;工作簿&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>file_name = &#39;test.xlsx&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>file = vb.Workbook(file_name) # 打开工作簿，文件不存在则新建</span></span>
<span class="line"><span>file = vb.load_workbook(file_name)  # 打开【加载】工作簿，如果工作簿不存在，则报错</span></span>
<span class="line"><span></span></span>
<span class="line"><span>file.create_sheet(&#39;sheet_name&#39;) # 创建工作表，sheet_name 为 string类型，指 工作表名称</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sheets = file.worksheets # 获取所有工作表</span></span>
<span class="line"><span>sheet = file[&#39;sheet_name&#39;]  # 获取 sheet_name 工作表对象，这是一个对象， sheet_name 是工作表名称</span></span>
<span class="line"><span>file.remove(sheet)  # 删除工作表，参数 sheet 是一个对象</span></span>
<span class="line"><span></span></span>
<span class="line"><span>copy_sheet = file.copy_worksheet(sheet)  # 复制指定工作表 sheet， 这里 参数 sheet 是工作表对象</span></span>
<span class="line"><span>copy_sheet.title = &#39;new sheet name&#39;  # 给复制的表命名，记得 还要 file.save() 才能保存新复制的表</span></span>
<span class="line"><span></span></span>
<span class="line"><span>file.save(file_name)  # 保存文件（工作簿）：任何操作之后，都需要保存文件</span></span></code></pre></div><table tabindex="0"><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>active</td><td>获取当前活跃的Worksheet</td></tr><tr><td>worksheets</td><td>以列表的形式返回所有的Worksheet（表格）</td></tr><tr><td>data_only</td><td>默认为 False，为 True时只读取数据不显示公式</td></tr><tr><td>read_only</td><td>判断是否以read_only模式打开Excel文档</td></tr><tr><td>encoding</td><td>获取文档的字符集编码</td></tr><tr><td>properties</td><td>获取文档的元数据，如标题，创建者，创建日期等</td></tr><tr><td>sheetnames</td><td>获取工作簿中的表（列表）</td></tr></tbody></table><table tabindex="0"><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>file.sheetnames</td><td>获取所有表格的名称</td></tr><tr><td>file[&#39;sheetname&#39;]</td><td>通过表格名称获取Worksheet对象</td></tr><tr><td>file.active</td><td>获取活跃的表格</td></tr><tr><td>remove</td><td>删除一个工作表对象【对象】</td></tr><tr><td>create_sheet</td><td>创建一个空的表格【表名】</td></tr><tr><td>copy_worksheet</td><td>在Workbook内拷贝表格【对象】</td></tr></tbody></table><h3 id="工作表" tabindex="-1">工作表 <a class="header-anchor" href="#工作表" aria-label="Permalink to &quot;工作表&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 从工作簿中获取工作表</span></span>
<span class="line"><span>file.sheetnames</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 获取指定工作表</span></span>
<span class="line"><span>file[sheet_name]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 激活第一个工作表</span></span>
<span class="line"><span>file.active</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 获取工作表名称</span></span>
<span class="line"><span>sheet.title</span></span></code></pre></div><table tabindex="0"><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>title</td><td>工作表名称</td></tr><tr><td>dimensions</td><td>表格的大小。指含有数据的表格的大小。即：左上角坐标:右下角坐标</td></tr><tr><td>max_row</td><td>表格的最大行</td></tr><tr><td>min_row</td><td>表格的最小行</td></tr><tr><td>max_column</td><td>表格最大列</td></tr><tr><td>min_column</td><td>表格最小列</td></tr><tr><td>rows</td><td>按行获取单元格（Cell对象）- 生成器 --- sheet.rows</td></tr><tr><td>columns</td><td>按列获取单元格（Cell对象）- 生成器 --- sheet.columns</td></tr><tr><td>freeze_panes</td><td>冻结窗格 --- sheet.freeze_panes = &#39;C3&#39;</td></tr><tr><td>values</td><td>按行获取表格的内容（数据）- 生成器</td></tr></tbody></table><blockquote><p>freeze_panes，参数比较特别，主要用于在表格较大时冻结顶部的行或左边的行。对于冻结的行，在用户滚动时，是始终可见的，可以设置为一个Cell对象或一个端元个坐标的字符串，单元格上面的行和左边的列将会冻结（单元格所在的行和列不会被冻结）。例如我们要冻结第一行那么设置A2为freeze_panes，如果要冻结第一列，freeze_panes取值为B1，如果要同时冻结第一行和第一列，那么需要设为B2为freeze_panes，freeze_panes值为none时，表示不冻结任何列。</p></blockquote><table tabindex="0"><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>iter_rows</td><td>按行获取所有单元格，内置属性有（min_row, max_row, min_col, max_col）</td></tr><tr><td>iter_columns</td><td>按列获取所有单元格</td></tr><tr><td>append</td><td>在表格末尾添加数据</td></tr><tr><td>merged_cells</td><td>合并多个单元格</td></tr><tr><td>unmerged_cells</td><td>移除合并的单元格</td></tr></tbody></table><h3 id="单元格" tabindex="-1">单元格 <a class="header-anchor" href="#单元格" aria-label="Permalink to &quot;单元格&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>row</td><td>单元格所在行</td></tr><tr><td>column</td><td>单元格所在列</td></tr><tr><td>value</td><td>单元格的值</td></tr><tr><td>coordinate</td><td>单元格的坐标</td></tr></tbody></table>`,19),d=[p];function l(r,i,o,h,c,b){return e(),a("div",null,d)}const u=t(n,[["render",l]]);export{m as __pageData,u as default};
